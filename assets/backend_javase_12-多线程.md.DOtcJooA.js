import{_ as i,c as a,o as n,a4 as h}from"./chunks/framework.-JfgED0h.js";const t="/docs/assets/1668051403591.5cudePGT.png",l="/docs/assets/1668052028054.CGJ-r-WJ.png",k="/docs/assets/1668052307537.CZsYFK-v.png",p="/docs/assets/1668052414444.Bw3xWnQ4.png",e="/docs/assets/image-2023-03-24-20-57-15.DPOjmPXb.png",F="/docs/assets/1668059112092.D0fcrGVR.png",r="/docs/assets/1668059997020.DmtpimDM.png",s="/docs/assets/image-2023-03-24-21-09-52.CvZr2D99.png",d="/docs/assets/image-2023-03-24-21-10-41.mD_AjXUf.png",g="/docs/assets/image-2023-03-21-16-44-06.6yve1UkH.png",y="/docs/assets/image-2023-03-21-17-04-54.CMW94oNf.png",E="/docs/assets/1668066279649.CkeoKlax.png",o="/docs/assets/image-2023-03-21-16-59-14.BxQCDfIj.png",c="/docs/assets/1668066844202.Dmmiys4A.png",C="/docs/assets/1668067745116.Bs4fDgEq.png",u="/docs/assets/1668067798673.d-zB8xaT.png",D="/docs/assets/1668067964048.HLsh2smR.png",f="/docs/assets/1668068110593.o2HONzVr.png",A="/docs/assets/1668068399363.Cqp_6Pj2.png",B="/docs/assets/1668069176927.DWpcLWWZ.png",m="/docs/assets/1668069524799.AKtYAuxA.png",b="/docs/assets/1668069740969.DRi-EzCa.png",v="/docs/assets/1668069923403.7OVTwivM.png",q="/docs/assets/1668070204768.oqKxG_7f.png",z=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"backend/javase/12-多线程.md","filePath":"backend/javase/12-多线程.md"}'),w={name:"backend/javase/12-多线程.md"},_=h('<h2 id="多线程" tabindex="-1">多线程 <a class="header-anchor" href="#多线程" aria-label="Permalink to &quot;多线程&quot;">​</a></h2><ul><li>多线程 <ul><li>线程常用方法 🍐</li><li>线程安全问题 🍐 理解 <ul><li>安全解决方案 ✏️ 🍐</li></ul></li><li>线程通讯</li></ul></li><li>线程通信案例 🚀 了解原理</li><li>线程池 <ul><li>线程池创建参数 🍐 ❤️</li><li>添加任务给线程池 🍐 ❤️</li><li>线程池工具类 🚀</li><li>并行和并发 🚀</li><li>线程的生命周期 🚀</li></ul></li></ul><p>前置知识</p><ol><li>能使用Runnable的方式创建任务，添加到Thread中运行</li><li>有过<code>上厕所锁门</code>的经历</li><li>理解多线程和单线程的区别</li></ol><h2 id="一、多线程常用方法-🚩" tabindex="-1">一、多线程常用方法 🚩 <a class="header-anchor" href="#一、多线程常用方法-🚩" aria-label="Permalink to &quot;一、多线程常用方法 🚩&quot;">​</a></h2><img src="'+t+`"><p>下面我们演示一下<code>getName()</code>、<code>setName(String name)</code>、<code>currentThread()</code>、<code>sleep(long time)</code>这些方法的使用效果。</p><p>点击查看演示代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> MyThread</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> MyThread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//1.执行父类Thread(String name)构造器，为当前线程设置名字了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        //2.currentThread() 哪个线程执行它，它就会得到哪个线程对象。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">currentThread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">            //3.getName() 获取线程名称</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(t.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">输出：</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p>再测试类中，创建线程对象，并启动线程</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> ThreadTest1</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> t1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> MyThread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        t1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">setName</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//设置线程名称;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        t1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(t1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">());  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//Thread-0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> t2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> MyThread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">2号线程</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // t2.setName(&quot;2号线程&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        t2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(t2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// Thread-1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 主线程对象的名字</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 哪个线程执行它，它就会得到哪个线程对象。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">currentThread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        m.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">setName</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">最牛的线程</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(m.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(m.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">线程输出：</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> i);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p>执行上面代码，效果如下图所示，我们发现每一条线程都有自己了名字了。</p><img src="`+l+`"><p>点击查看join方法代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> ThreadTest2</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // join方法作用：让当前调用这个方法的线程先执行完。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> t1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> MyThread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">1号线程</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        t1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        t1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> t2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> MyThread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">2号线程</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        t2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        t2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> t3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> MyThread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">3号线程</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        t3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        t3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p>执行效果是1号线程先执行完，再执行2号线程；2号线程执行完，再执行3号线程；3号线程执行完就结束了。</p><img src="`+k+'"><p>我们再尝试，把join()方法去掉，再看执行效果。此时你会发现2号线程没有执行完1号线程就执行了效果是多次运行才出现的，根据个人电脑而异，可能小伙伴半天也出现不了也是正常的</p><img src="'+p+'"><p>总结</p><ol><li>重点练习cureentThread 获取当前线程</li><li>练习sleep(毫秒) 让当前执行的线程休眠，俗称睡一下</li></ol><h2 id="二、线程安全问题-🚩-🍐-细心理解" tabindex="-1">二、线程安全问题 🚩 🍐 细心理解 <a class="header-anchor" href="#二、线程安全问题-🚩-🍐-细心理解" aria-label="Permalink to &quot;二、线程安全问题 🚩 🍐 细心理解&quot;">​</a></h2><p>各位小伙伴，前面我们已经学习了如何创建线程，以及线程的常用方法。接下来，我们要学习一个在实际开发过程中，使用线程时最重要的一个问题，叫线程安全问题。</p><h3 id="_1️⃣-2-1-线程安全问题概述" tabindex="-1">1️⃣ 2.1 线程安全问题概述 <a class="header-anchor" href="#_1️⃣-2-1-线程安全问题概述" aria-label="Permalink to &quot;1️⃣ 2.1 线程安全问题概述&quot;">​</a></h3><p>线程安全问题指的是，多个线程同时操作同一个共享资源的时候，可能会出现业务安全问题</p><img src="'+e+'"><p>场景：</p><ol><li>小明和小红是一对夫妻，他们有一个共享账户，余额是10万元，</li><li>小红和小明同时来取钱，并且2人各自都在取钱10万元，<strong>可能出现什么问题呢？</strong></li></ol><img src="'+F+`"><p>在这个取钱案例中，两个人把共享账户的钱都取了10万，但问题是只有10万块钱</p><h3 id="_2️⃣-2-2-线程安全问题的代码演示" tabindex="-1">2️⃣ 2.2 线程安全问题的代码演示 <a class="header-anchor" href="#_2️⃣-2-2-线程安全问题的代码演示" aria-label="Permalink to &quot;2️⃣ 2.2 线程安全问题的代码演示&quot;">​</a></h3><p>先定义一个共享的账户类</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> Account</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> cardId; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 卡号</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> money; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 余额。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> Account</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> Account</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> cardId</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> money</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">.cardId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> cardId;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">.money </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> money;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 小明 小红同时过来的</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> drawMoney</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> money</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 先搞清楚是谁来取钱？</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">currentThread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 1、判断余额是否足够</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">.money </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> money){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">来取钱</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> money </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">成功！</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">.money </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">-=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> money;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">来取钱后，余额剩余：</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">.money);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">来取钱：余额不足~</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> getCardId</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> cardId;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> setCardId</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> cardId</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">.cardId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> cardId;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> getMoney</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> money;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> setMoney</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">double</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> money</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">.money </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> money;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p>在定义一个是取钱的线程类</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> DrawThread</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Account</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> acc;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> DrawThread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Account</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> acc</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(name);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">.acc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> acc;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 取钱(小明，小红)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        acc.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">drawMoney</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">100000</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p>最后，再写一个测试类，在测试类中创建两个线程对象</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> ThreadTest</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">         // 1、创建一个账户对象，代表两个人的共享账户。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Account</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> acc </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> Account</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">ICBC-110</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">100000</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 2、创建两个线程，分别代表小明 小红，再去同一个账户对象中取钱10万。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> DrawThread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(acc, </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">小明</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 小明</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> DrawThread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(acc, </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">小红</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 小红</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p>运行程序，执行效果如下。你会发现两个人都取了10万块钱，余额为-10完了。</p><img src="`+r+`"><h3 id="_3️⃣-2-3-线程同步方案" tabindex="-1">3️⃣ 2.3 线程同步方案 <a class="header-anchor" href="#_3️⃣-2-3-线程同步方案" aria-label="Permalink to &quot;3️⃣ 2.3 线程同步方案&quot;">​</a></h3><p>上述案例中，账户中出现了负数 出现了--线程安全问题！！！</p><p>解决方案：加锁</p><p><strong>意思是每次只允许一个线程加锁，加锁后才能进入访问，访问完毕后自动释放锁，然后其他线程才能再加锁进来。</strong></p><p><strong>Java提供了三种枷锁方案</strong>：</p><ol><li>同步代码块</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//锁对象：必须是一个唯一的对象（同一个地址）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">synchronized</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(锁对象){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    //...访问共享数据的代码...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><ol start="2"><li>同步方法</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> synchronized</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> 方法名(参数列表) {</span></span></code></pre></div><ol start="3"><li>Lock锁</li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">1.首先在成员变量位子，需要创建一个Lock接口的实现类对象（这个对象就是锁对象）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Lock</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> lk </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> ReentrantLock</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">2.在需要上锁的地方加入下面的代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">	 lk.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 加锁</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">	 //...中间是被锁住的代码...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">	 lk.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 解锁</span></span></code></pre></div><h4 id="_1️⃣-同步代码块" tabindex="-1">1️⃣ 同步代码块 <a class="header-anchor" href="#_1️⃣-同步代码块" aria-label="Permalink to &quot;1️⃣ 同步代码块&quot;">​</a></h4><p>同步代码块的作用就是把访问共享数据的代码锁起来，以此保证线程安全。</p><p><img src="`+s+'"><img src="'+d+`"></p><blockquote><p>快捷键：选中要加锁的代码，按住ctrl+alt+t 选择synchronized 👈</p></blockquote><p>使用同步代码块，来解决前面代码里面的线程安全问题。我们只需要修改DrawThread类中的代码即可。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 小明 小红线程同时过来的</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> drawMoney</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> money) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 先搞清楚是谁来取钱？</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">currentThread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 1、判断余额是否足够</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // this正好代表共享资源！</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    synchronized</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">.money </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> money){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">来取钱</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> money </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">成功！</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">            this</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">.money </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">-=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> money;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">来取钱后，余额剩余：</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">.money);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">来取钱：余额不足~</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p>此时再运行测试类，观察是否会出现不合理的情况。</p><p>锁对象如何选择</p><ol><li>锁的特性：唯一性</li><li>建议把<strong>共享资源作为锁对象</strong>, 不要将随便<strong>无关的对象</strong>当做锁对象</li><li>对于<strong>实例方法</strong>，建议使用this 作为锁对象</li><li>对于<strong>静态方法</strong> static修饰的，建议把类的字节码(类名.class) 当做锁对象</li></ol><h4 id="_2️⃣同步方法" tabindex="-1">2️⃣同步方法 <a class="header-anchor" href="#_2️⃣同步方法" aria-label="Permalink to &quot;2️⃣同步方法&quot;">​</a></h4><p>提示</p><p>同步方法，就是把<strong>整个方法给锁住</strong></p><ul><li>一个线程调用这个方法</li><li>另一个线程调用的时候就执行不了，只有等上一个线程调用结束，下一个线程调用才能继续执行。</li></ul><img src="`+s+`"><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 同步方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> synchronized</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> drawMoney</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> money) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 先搞清楚是谁来取钱？</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">currentThread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 1、判断余额是否足够</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">.money </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> money){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">来取钱</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> money </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">成功！</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">.money </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">-=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> money;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">来取钱后，余额剩余：</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">.money);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">来取钱：余额不足~</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p>改完之后，再次运行测试类，观察是否会出现不合理的情况。</p><p>同步方法有没有锁对象？锁对象是谁？</p><ul><li>同步方法也是有锁对象，只不过这个锁对象没有显示的写出来而已。 <ol><li>对于实例方法，锁对象其实是this（也就是方法的调用者）</li><li>对于静态方法，锁对象时类的字节码对象（类名.class）</li></ol></li></ul><p>同步代码块和同步方法区别</p><ol><li><strong>不存在哪个好与不好</strong>，只是一个锁住的<strong>范围大，一个范围小</strong></li><li>同步方法是将方法中<strong>所有的代码锁住</strong></li><li>同步代码块是将方法中的<strong>部分代码锁住</strong></li></ol><h4 id="_3️⃣-lock锁" tabindex="-1">3️⃣ Lock锁 <a class="header-anchor" href="#_3️⃣-lock锁" aria-label="Permalink to &quot;3️⃣ Lock锁&quot;">​</a></h4><p>Lock锁</p><p>Lock锁是JDK5版本专门提供的一种锁对象，通过这个锁对象的方法来达到加锁，和释放锁的目的，<strong>使用起来更加灵活</strong>。格式如下</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">1.首先在成员变量位子，需要创建一个Lock接口的实现类对象（这个对象就是锁对象）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Lock</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> lk </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> ReentrantLock</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">2.在需要上锁的地方加入下面的代码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">	 lk.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 加锁</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">	 //...中间是被锁住的代码...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">	 lk.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 解锁</span></span></code></pre></div><p>使用Lock锁改写前面DrawThread中取钱的方法，代码如下</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 创建了一个锁对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Lock</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> lk </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> ReentrantLock</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> drawMoney</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> money) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 先搞清楚是谁来取钱？</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">currentThread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">            lk.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 加锁</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">            // 1、判断余额是否足够</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">.money </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> money){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">来取钱</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> money </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">成功！</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">                this</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">.money </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">-=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> money;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">来取钱后，余额剩余：</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">.money);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">            }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">来取钱：余额不足~</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Exception</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">            e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">            lk.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 解锁</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p>运行程序结果，观察是否有线程安全问题。到此三种解决线程安全问题的办法我们就学习完了。</p><h2 id="三、线程通信-🚩-🚀-了解" tabindex="-1">三、线程通信 🚩 🚀 了解 <a class="header-anchor" href="#三、线程通信-🚩-🚀-了解" aria-label="Permalink to &quot;三、线程通信 🚩 🚀 了解&quot;">​</a></h2><p>接下来，我们学习一下线程通信。</p><p><strong>首先，什么是线程通信呢？</strong></p><ul><li>当多个线程共同操作共享资源时，线程间通过某种方式互相告知自己的状态，以相互协调，避免无效的资源挣抢。</li></ul><p><strong>线程通信的常见模式：是生产者与消费者模型</strong></p><ul><li>生产者线程负责生成数据</li><li>消费者线程负责消费生产者生成的数据</li><li>注意：生产者生产完数据后应该让自己等待，通知其他消费者消费；消费者消费完数据之后应该让自己等待，同时通知生产者生成。</li></ul><h3 id="阻塞队列实现消费者和生产者模型" tabindex="-1">阻塞队列实现消费者和生产者模型 <a class="header-anchor" href="#阻塞队列实现消费者和生产者模型" aria-label="Permalink to &quot;阻塞队列实现消费者和生产者模型&quot;">​</a></h3><h4 id="_3-1-1-核心-api-blockingqueue" tabindex="-1">3.1.1 核心 API BlockingQueue <a class="header-anchor" href="#_3-1-1-核心-api-blockingqueue" aria-label="Permalink to &quot;3.1.1 核心 API BlockingQueue&quot;">​</a></h4><p>BlockingQueue 阻塞队列，相当于仓库，用来放置商品</p><ul><li>核心方法 <ul><li>put(Object) 将参数放入到队列中，如果放不进去会阻塞（等待）。</li><li>take() ： 取出第一个数据，取不到会阻塞（等待）。</li></ul></li><li>常见实现： <ul><li>ArrayBlockingQueue 底层是数组，有界</li><li>LinkedBlockingQueue 底层是链表，无界，但不是真正的无界，最大值为 int 的最大值</li></ul></li></ul><h4 id="_3-1-2-步鄹和具体实现" tabindex="-1">3.1.2 步鄹和具体实现 <a class="header-anchor" href="#_3-1-2-步鄹和具体实现" aria-label="Permalink to &quot;3.1.2 步鄹和具体实现&quot;">​</a></h4><h5 id="_1️⃣-步鄹" tabindex="-1">1️⃣ 步鄹 <a class="header-anchor" href="#_1️⃣-步鄹" aria-label="Permalink to &quot;1️⃣ 步鄹&quot;">​</a></h5><ol><li>创建一个 ArrayBlockingQueue 为 10 的阻塞队列</li><li>通过构造的形式，将队列对象传入到 Thread 类中（Produccer 生产者，Customer 消费者）</li><li>在生产者 Produccer 中的 run 方法中，调用 put 方法放入汉堡包</li><li>在消费者 Customer 的 run 方法中，调用 take 方法 消费汉堡包</li></ol><h5 id="_2️⃣-代码实现" tabindex="-1">2️⃣ 代码实现 <a class="header-anchor" href="#_2️⃣-代码实现" aria-label="Permalink to &quot;2️⃣ 代码实现&quot;">​</a></h5><p>点击查看代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//        创建一个容器，阻塞队列，用来装食物  参数为容积   容器为公共变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        ArrayBlockingQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; jz</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> ArrayBlockingQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Produccer</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> produccer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> Produccer</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(jz);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> customer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(jz);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//        启动线程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        produccer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        customer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> * 生产者</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> Produccer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//    如果要传值，使用构造方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    ArrayBlockingQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; jz;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//    总共生产50个</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> Produccer</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">ArrayBlockingQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">jz</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">.jz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> jz;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//       用来生产东西 往队列中塞东西  put</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">       while</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">){</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//           如果队列满的  就睡觉</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//           如果队列有空余，就生产</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">           try</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">               jz.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">小炒肉</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">count);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">               System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">生产者存入小炒肉</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">count);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//               当容器存满后，put 会阻塞  等待消费者消费</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">               count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">           } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Exception</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">               e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">           }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">       }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> * 消费者----线程B</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> Customer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    //    如果要传值，使用构造方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    ArrayBlockingQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; jz;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">ArrayBlockingQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">jz</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">.jz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> jz;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//        消费容器中的事物，take方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">     while</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//         System.out.println(&quot;消费者 正准备消费&quot;);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">         String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> take </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">         try</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">            //  睡个100ms 让生产者先生产</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">             Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">             take </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> jz.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">take</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//        当队列中没有东西的时候， take会阻塞等待</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">             System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">消费者 正在消费 </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">take);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">         } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">InterruptedException</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">             e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">     }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><h2 id="四、线程池-🚩-❤️-🍐" tabindex="-1">四、线程池 🚩 ❤️ 🍐 <a class="header-anchor" href="#四、线程池-🚩-❤️-🍐" aria-label="Permalink to &quot;四、线程池 🚩 ❤️ 🍐&quot;">​</a></h2><h3 id="_1️⃣-4-1-线程池概述" tabindex="-1">1️⃣ 4.1 线程池概述 <a class="header-anchor" href="#_1️⃣-4-1-线程池概述" aria-label="Permalink to &quot;1️⃣ 4.1 线程池概述&quot;">​</a></h3><p>提示</p><p><strong>线程池就是一个可以复用线程的技术</strong>。</p><p><strong>不使用线程池的场景：</strong></p><blockquote><p>假设：用户每次发起一个请求给后台，后台就创建一个新的线程来处理，下次新的任务过来肯定也会创建新的线程，如果用户量非常大，创建的线程也讲越来越多。然而，创建线程是开销很大的，并且请求过多时，会严重影响系统性能。</p></blockquote><p><strong>使用线程池的场景</strong></p><blockquote><p>下次新的任务过来，先不创建新的线程，而是从线程池中获取线程，减少线程的创建</p></blockquote><p><strong>线程池就是一个线程复用技术，它可以提高线程的利用率</strong></p><img src="`+g+'"><h3 id="_2️⃣-4-2-创建线程池-🍐-❤️" tabindex="-1">2️⃣ 4.2 创建线程池 🍐 ❤️ <a class="header-anchor" href="#_2️⃣-4-2-创建线程池-🍐-❤️" aria-label="Permalink to &quot;2️⃣ 4.2 创建线程池 🍐 ❤️&quot;">​</a></h3><img src="'+y+'"><p>使用ThreadPoolExecutor类就可以用来创建线程池对象</p><p>在JDK5版本中提供了代表<strong>线程池的接口ExecutorService</strong>，而这个接口下有一个实现类叫<strong>ThreadPoolExecutor类</strong></p><p>下面是它的构造器，参数比较多，不要怕，干就完了_。</p><img src="'+E+`"><p>接下来，用这7个参数的构造器来创建线程池的对象。代码如下</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">ExecutorService</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> pool </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> ThreadPoolExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">    3</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,	</span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//核心线程数有3个</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">    5</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//最大线程数有5个。   临时线程数=最大线程数-核心线程数=5-3=2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">    8</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,	</span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//临时线程存活的时间8秒。 意思是临时线程8秒没有任务执行，就会被销毁掉。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    TimeUnit.SECONDS,</span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//时间单位（秒）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;">    new</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> ArrayBlockingQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">), </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//任务阻塞队列，没有来得及执行的任务在，任务队列中等待</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">defaultThreadFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(), </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//用于创建线程的工厂对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;">    new</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> ThreadPoolExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">CallerRunsPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//拒绝策略</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span></code></pre></div><p>关于线程池，我们需要注意下面的两个问题</p><img src="`+o+'"><p>临时线程什么时候创建？</p><p>新任务提交时，发现核心线程都在忙、任务队列满了、并且还可以创建临时线程，此时会创建临时线程。</p><p>什么时候开始拒绝新的任务？</p><p>核心线程和临时线程都在忙、任务队列也满了、新任务过来时才会开始拒绝任务。</p><h3 id="_3️⃣-4-3-线程池执行-提交-任务" tabindex="-1">3️⃣ 4.3 线程池执行(提交)任务 <a class="header-anchor" href="#_3️⃣-4-3-线程池执行-提交-任务" aria-label="Permalink to &quot;3️⃣ 4.3 线程池执行(提交)任务&quot;">​</a></h3><h4 id="线程池执行runnable任务" tabindex="-1">线程池执行Runnable任务 <a class="header-anchor" href="#线程池执行runnable任务" aria-label="Permalink to &quot;线程池执行Runnable任务&quot;">​</a></h4><p>创建好线程池之后，接下来我们就可以使用线程池执行任务了。线程池执行的任务可以有两种，一种是Runnable任务；一种是callable任务。下面的execute方法可以用来执行Runnable任务。</p><img src="'+c+`"><p>先准备一个线程任务类</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> MyRunnable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Runnable</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 任务是干啥的？</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">currentThread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> ==&gt; 输出666~~</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        //为了模拟线程一直在执行，这里睡久一点</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">            Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(Integer.MAX_VALUE);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">InterruptedException</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">            e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p>下面是执行Runnable任务的代码，注意阅读注释，对照着前面的7个参数理解。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">ExecutorService</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> pool </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> ThreadPoolExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">    3</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,	</span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//核心线程数有3个</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">    5</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//最大线程数有5个。   临时线程数=最大线程数-核心线程数=5-3=2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">    8</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,	</span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//临时线程存活的时间8秒。 意思是临时线程8秒没有任务执行，就会被销毁掉。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    TimeUnit.SECONDS,</span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//时间单位（秒）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;">    new</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> ArrayBlockingQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">), </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//任务阻塞队列，没有来得及执行的任务在，任务队列中等待</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">defaultThreadFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(), </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//用于创建线程的工厂对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;">    new</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> ThreadPoolExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">CallerRunsPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//拒绝策略</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Runnable</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> MyRunnable</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">pool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 线程池会自动创建一个新线程，自动处理这个任务，自动执行的！</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">pool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 线程池会自动创建一个新线程，自动处理这个任务，自动执行的！</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">pool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 线程池会自动创建一个新线程，自动处理这个任务，自动执行的！</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//下面4个任务在任务队列里排队</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">pool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">pool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">pool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">pool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//下面2个任务，会被临时线程的创建时机了</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">pool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">pool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 到了新任务的拒绝时机了！</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">pool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target);</span></span></code></pre></div><p>执行上面的代码，结果输出如下</p><img src="`+C+'"><h4 id="线程池执行callable任务" tabindex="-1">线程池执行Callable任务 <a class="header-anchor" href="#线程池执行callable任务" aria-label="Permalink to &quot;线程池执行Callable任务&quot;">​</a></h4><p>接下来，我们学习使用线程池执行Callable任务。callable任务相对于Runnable任务来说，就是多了一个返回值。</p><p>执行Callable任务需要用到下面的submit方法</p><img src="'+u+`"><p><strong>第一步：先准备一个Callable线程任务</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> MyCallable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Callable</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> n;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> MyCallable</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> n</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">.n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> n;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 2、重写call方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> call</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 描述线程的任务，返回线程执行返回后的结果。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 需求：求1-n的和返回。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> n; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">            sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">currentThread</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">求出了1-</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">的和是：</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> sum;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p><strong>第二步：再准备一个测试类，在测试类中创建线程池，并执行callable任务。</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> ThreadPoolTest2</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 1、通过ThreadPoolExecutor创建一个线程池对象。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        ExecutorService</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> pool </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> ThreadPoolExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">            3</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">            5</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">            8</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">            TimeUnit.SECONDS,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;">            new</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> ArrayBlockingQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">            Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">defaultThreadFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;">            new</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> ThreadPoolExecutor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">CallerRunsPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 2、使用线程处理Callable任务。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Future</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; f1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> pool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> MyCallable</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Future</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; f2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> pool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> MyCallable</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Future</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; f3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> pool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> MyCallable</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Future</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; f4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> pool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> MyCallable</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 3、执行完Callable任务后，需要获取返回结果。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(f1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(f2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(f3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(f4.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p>执行后，结果如下图所示</p><img src="`+D+'"><h3 id="_5️⃣-4-5-线程池工具类-executors-🚀-了解" tabindex="-1">5️⃣ 4.5 线程池工具类（Executors）🚀 了解 <a class="header-anchor" href="#_5️⃣-4-5-线程池工具类-executors-🚀-了解" aria-label="Permalink to &quot;5️⃣ 4.5 线程池工具类（Executors）🚀 了解&quot;">​</a></h3><p>参数太多、记不住，有没有快捷的创建线程池的方法呢？</p><p><strong>有的</strong>。</p><p>Java为开发者提供了一个创建线程池的工具类，叫做Executors，它提供了方法可以创建各种不能特点的线程池。如下图所示</p><img src="'+f+`"><p>接下来，我们演示一下创建固定线程数量的线程池。这几个方法用得不多，所以这里不做过多演示，小伙伴们了解一下就行了。</p><p>点击查看代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> ThreadPoolTest3</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 1、通过Executors创建一个线程池对象。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        ExecutorService</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> pool </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> Executors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">newFixedThreadPool</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 老师：核心线程数量到底配置多少呢？？？</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 计算密集型的任务：核心线程数量 = CPU的核数 + 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // IO密集型的任务：核心线程数量 = CPU核数 * 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 2、使用线程处理Callable任务。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Future</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; f1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> pool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> MyCallable</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Future</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; f2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> pool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> MyCallable</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Future</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; f3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> pool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> MyCallable</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Future</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; f4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> pool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> MyCallable</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(f1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(f2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(f3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(f4.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p>Executors创建线程池这么好用，为什么不推荐小伙伴们使用呢？</p><p>原因在这里：看下图，这是《阿里巴巴Java开发手册》提供的强制规范要求。</p><img src="`+A+'"><h2 id="五、补充知识-🚩-🍐-🚀-了解" tabindex="-1">五、补充知识 🚩 🍐 🚀 了解 <a class="header-anchor" href="#五、补充知识-🚩-🍐-🚀-了解" aria-label="Permalink to &quot;五、补充知识 🚩 🍐 🚀 了解&quot;">​</a></h2><p>最后，我们再补充几个概念性的知识点，小伙伴们知道这些概念什么意思就可以了。</p><h3 id="_1️⃣-5-1-并发和并行" tabindex="-1">1️⃣ 5.1 并发和并行 <a class="header-anchor" href="#_1️⃣-5-1-并发和并行" aria-label="Permalink to &quot;1️⃣ 5.1 并发和并行&quot;">​</a></h3><p>先学习第一个补充知识点，并发和并行。在讲解并发和并行的含义之前，我们先来了解一下什么是进程、线程？</p><ul><li>正常运行的程序（软件）就是一个独立的进程</li><li>线程是属于进程，一个进程中包含多个线程</li><li>进程中的线程其实并发和并行同时存在（继续往下看）</li></ul><p>我们可以打开系统的任务管理器看看（快捷键：Ctrl+Shfit+Esc），自己的电脑上目前有哪些进程。</p><img src="'+B+'"><p>知道了什么是进程和线程之后，接着我们再来学习并发和并行的含义。</p><p><strong>首先，来学习一下什么是并发？</strong></p><p>进程中的线程由CPU负责调度执行，但是CPU同时处理线程的数量是优先的，为了保证全部线程都能执行到，CPU采用轮询机制为系统的每个线程服务，由于CPU切换的速度很快，给我们的感觉这些线程在同时执行，这就是并发。（简单记：并发就是多条线程交替执行）</p><p><strong>接下，再来学习一下什么是并行？</strong></p><p>并行指的是，多个线程同时被CPU调度执行。如下图所示，多个CPU核心在执行多条线程</p><img src="'+m+'"><p><strong>最后一个问题，多线程到底是并发还是并行呢？</strong></p><p>其实多个线程在我们的电脑上执行，并发和并行是同时存在的。</p><h3 id="_2️⃣-5-2-线程的生命周期" tabindex="-1">2️⃣ 5.2 线程的生命周期 <a class="header-anchor" href="#_2️⃣-5-2-线程的生命周期" aria-label="Permalink to &quot;2️⃣ 5.2 线程的生命周期&quot;">​</a></h3><p>接下来，我们学习最后一个有关线程的知识点，叫做线程的生命周期。所谓生命周期就是线程从生到死的过程中间有哪些状态，以及这些状态之间是怎么切换的。</p><p>为了让大家同好的理解线程的生命周期，先用人的生命周期举个例子，人从生到死有下面的几个过程。在人的生命周期过程中，各种状态之间可能会有切换，线程也是一样的。</p><img src="'+b+'"><p>接下来就来学习线程的生命周期。在Thread类中有一个嵌套的枚举类叫Thread.Status，这里面定义了线程的6中状态。如下图所示</p><img src="'+v+`"><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">NEW</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> 新建状态，线程还没有启动</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">RUNNABLE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> 可以运行状态，线程调用了</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">()方法后处于这个状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">BLOCKED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> 锁阻塞状态，没有获取到锁处于这个状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">WAITING</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> 无限等待状态，线程执行时被调用了wait方法处于这个状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">TIMED_WAITING</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> 计时等待状态，线程执行时被调用了</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(毫秒)或者</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">wait</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(毫秒)方法处于这个状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">TERMINATED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> 终止状态, 线程执行完毕或者遇到异常时，处于这个状态。</span></span></code></pre></div><p>这几种状态之间切换关系如下图所示</p><img src="`+q+'">',174),T=[_];function S(x,j,P,M,N,I){return n(),a("div",null,T)}const L=i(w,[["render",S]]);export{z as __pageData,L as default};
