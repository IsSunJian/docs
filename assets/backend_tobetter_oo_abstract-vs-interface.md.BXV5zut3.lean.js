import{_ as a,c as i,o as s,a4 as t}from"./chunks/framework.-JfgED0h.js";const g=JSON.parse('{"title":"Java 抽象类和接口的区别，看这一篇就够了，全面解析","description":"本文详细讨论了Java抽象类与接口的区别，包括它们的定义、应用场景、语法规则等方面的异同。通过比较抽象类与接口的优缺点，我们将为您提供一些关于何时使用抽象类和何时使用接口的实际建议，以便在实际编程中做出明智的选择。","frontmatter":{"title":"Java 抽象类和接口的区别，看这一篇就够了，全面解析","shortTitle":"Java抽象类和接口的区别","description":"本文详细讨论了Java抽象类与接口的区别，包括它们的定义、应用场景、语法规则等方面的异同。通过比较抽象类与接口的优缺点，我们将为您提供一些关于何时使用抽象类和何时使用接口的实际建议，以便在实际编程中做出明智的选择。","category":["Java 核心"],"tag":["面向对象编程"],"head":[["meta",{"name":"keywords","content":"Java,java 抽象类 接口,java interface abstract,抽象类, 接口"}]]},"headers":[],"relativePath":"backend/tobetter/oo/abstract-vs-interface.md","filePath":"backend/tobetter/oo/abstract-vs-interface.md"}'),e={name:"backend/tobetter/oo/abstract-vs-interface.md"},l=t("",25),n=[l];function p(h,r,o,c,k,d){return s(),i("div",null,n)}const F=a(e,[["render",p]]);export{g as __pageData,F as default};
