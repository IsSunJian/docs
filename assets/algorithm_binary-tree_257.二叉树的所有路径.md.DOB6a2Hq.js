import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.-JfgED0h.js";const o=JSON.parse('{"title":"LeetCode 257. 二叉树的所有路径","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/binary-tree/257.二叉树的所有路径.md","filePath":"algorithm/binary-tree/257.二叉树的所有路径.md"}'),t={name:"algorithm/binary-tree/257.二叉树的所有路径.md"},h=n(`<h1 id="leetcode-257-二叉树的所有路径" tabindex="-1">LeetCode 257. 二叉树的所有路径 <a class="header-anchor" href="#leetcode-257-二叉树的所有路径" aria-label="Permalink to &quot;LeetCode 257. 二叉树的所有路径&quot;">​</a></h1><h2 id="题目描述" tabindex="-1">题目描述 <a class="header-anchor" href="#题目描述" aria-label="Permalink to &quot;题目描述&quot;">​</a></h2><p>给定一个二叉树，返回所有从根节点到叶子节点的路径。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F6F6F4;">输入</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">   1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">   \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">2</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">     3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">  5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F6F6F4;">输出</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">1-&gt;2-&gt;5</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">1-&gt;3</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F6F6F4;">解释</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#F6F6F4;">所有根节点到叶子节点的路径为</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">3</span></span></code></pre></div><p>来源：力扣（LeetCode） 链接：<a href="https://leetcode-cn.com/problems/binary-tree-paths" target="_blank" rel="noreferrer">https://leetcode-cn.com/problems/binary-tree-paths</a> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路" tabindex="-1">解题思路 <a class="header-anchor" href="#解题思路" aria-label="Permalink to &quot;解题思路&quot;">​</a></h2><p><code>dfs</code>，从根节点开始搜，对于非叶子节点，进行累计，如果找到了叶子节点，我们就将结果存起来。通过字符串拼接来存储路径。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> * Definition for a binary tree node.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> * function TreeNode(val) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> *     this.val = val;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> *     this.left = this.right = null;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> * }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> {TreeNode}</span><span style="--shiki-light:#24292E;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> root</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">@return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> {string[]}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> binaryTreePaths</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (root </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> [];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> [];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> dfs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">cur</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 叶子节点，存起来</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (root.left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> root.right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">      cur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> root.val;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">      res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(cur);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    cur </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> root.val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 处理非叶子节点</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 先遍历左子树，再遍历右子树</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    root.left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> dfs</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(cur, root.left);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    root.right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> dfs</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(cur, root.right);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  };</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">  dfs</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, root);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> res;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">};</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">学如逆水行舟，不进则退</span></span></code></pre></div>`,11),l=[h];function k(p,e,r,F,d,g){return a(),i("div",null,l)}const c=s(t,[["render",k]]);export{o as __pageData,c as default};
