import{_ as s,c as n,o as a,a4 as p}from"./chunks/framework.K9vKjHgL.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/vue/图片懒加载.md","filePath":"frontend/vue/图片懒加载.md"}'),l={name:"frontend/vue/图片懒加载.md"},e=p(`<h2 id="图片懒加载" tabindex="-1">图片懒加载 <a class="header-anchor" href="#图片懒加载" aria-label="Permalink to &quot;图片懒加载&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>// 1.安装插件</span></span>
<span class="line"><span>yarn add vue-lazyload</span></span>
<span class="line"><span>// 2.在入口文件main.js中引入并使用</span></span>
<span class="line"><span>import VueLazylod from &#39;vue-lazyload&#39;</span></span>
<span class="line"><span>// 在Vue中直接使用</span></span>
<span class="line"><span>Vue.use(VueLazyload)</span></span>
<span class="line"><span>// 3.在Vue文件中将img标签的src属性直接改为v-lazy,从而将图片显示方式改为懒加载显示</span></span>
<span class="line"><span>&lt;img v-lazy=&quot;/static/img/1.png&quot;&gt;</span></span></code></pre></div><h2 id="依赖注入-跨级通信-默认数据不响应" tabindex="-1">依赖注入(跨级通信)默认数据不响应 <a class="header-anchor" href="#依赖注入-跨级通信-默认数据不响应" aria-label="Permalink to &quot;依赖注入(跨级通信)默认数据不响应&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>export default {</span></span>
<span class="line"><span>  // provide:提供 inject:注入 默认数据不是响应式的！！！</span></span>
<span class="line"><span>  //祖先级组件通过provide提供数据 子孙组件通过inject获取数据</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // 祖先级组件</span></span>
<span class="line"><span>   data() {</span></span>
<span class="line"><span>    return {</span></span>
<span class="line"><span>      name: &#39;QQ&#39;,</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  provide() {</span></span>
<span class="line"><span>    return {</span></span>
<span class="line"><span>      name: this.name,</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>  //   子孙级组件</span></span>
<span class="line"><span>  inject: [&#39;name&#39;],</span></span>
<span class="line"><span>  create(){</span></span>
<span class="line"><span>    console.log(this.name)</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="依赖注入使数据成为响应式" tabindex="-1">依赖注入使数据成为响应式 <a class="header-anchor" href="#依赖注入使数据成为响应式" aria-label="Permalink to &quot;依赖注入使数据成为响应式&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>// 依赖注入使数据成为响应式的！！！</span></span>
<span class="line"><span>&lt;template&gt;</span></span>
<span class="line"><span>  &lt;div&gt;</span></span>
<span class="line"><span>    {{obj.name}}</span></span>
<span class="line"><span>    {{num}}</span></span>
<span class="line"><span>    &lt;button @click=&quot;editAge&quot; &gt;+1&lt;/button&gt;</span></span>
<span class="line"><span>  &lt;/div&gt;</span></span>
<span class="line"><span>&lt;/template&gt;</span></span>
<span class="line"><span>&lt;script&gt;</span></span>
<span class="line"><span>export default {</span></span>
<span class="line"><span>  //祖先级组件</span></span>
<span class="line"><span>  data(){</span></span>
<span class="line"><span>    return{</span></span>
<span class="line"><span>      obj:{</span></span>
<span class="line"><span>        name:&#39;QQ&#39;,</span></span>
<span class="line"><span>        num:10</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>      age:21</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    methods:{</span></span>
<span class="line"><span>      editAge(){</span></span>
<span class="line"><span>        this.num++</span></span>
<span class="line"><span>        this.age++</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    provide(){</span></span>
<span class="line"><span>      return{</span></span>
<span class="line"><span>        //一种方法是用对象包裹要传的数据</span></span>
<span class="line"><span>        obj:this.obj</span></span>
<span class="line"><span>        //一种方法传递一个参数用方法返回</span></span>
<span class="line"><span>        age:() =&gt; this.age</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>&lt;/script&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 子孙级组件</span></span>
<span class="line"><span>&lt;template&gt;</span></span>
<span class="line"><span>  &lt;div&gt;</span></span>
<span class="line"><span>    {{obj.name}}</span></span>
<span class="line"><span>    {{age()}}</span></span>
<span class="line"><span>  &lt;/div&gt;</span></span>
<span class="line"><span>&lt;/template&gt;</span></span>
<span class="line"><span>&lt;script&gt;</span></span>
<span class="line"><span>export default{</span></span>
<span class="line"><span>    inject:[&#39;obj&#39;,&#39;age&#39;],</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>&lt;/script&gt;</span></span></code></pre></div>`,6),t=[e];function i(c,o,d,r,u,h){return a(),n("div",null,t)}const v=s(l,[["render",i]]);export{m as __pageData,v as default};
