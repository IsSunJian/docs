import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.K9vKjHgL.js";const E=JSON.parse('{"title":"流 Stream","description":"","frontmatter":{},"headers":[],"relativePath":"java/javase/容器/stream.md","filePath":"java/javase/容器/stream.md"}'),h={name:"java/javase/容器/stream.md"},k=t(`<h1 id="流-stream" tabindex="-1">流 Stream <a class="header-anchor" href="#流-stream" aria-label="Permalink to &quot;流 Stream&quot;">​</a></h1><hr><h2 id="基础概念" tabindex="-1">基础概念 <a class="header-anchor" href="#基础概念" aria-label="Permalink to &quot;基础概念&quot;">​</a></h2><h3 id="流" tabindex="-1">流 <a class="header-anchor" href="#流" aria-label="Permalink to &quot;流&quot;">​</a></h3><p>流处理是对运动中的数据的处理，在生成或接收数据时直接计算数据。应用程序中分析和查询不断存在，数据不断地流经它们。在从流中接收到事件时，流处理应用程序对该事件作出反应。</p><p>如果我们使用传统的循环迭代方式对数据集进行复杂计算，常常会带来两个弊端：</p><ol><li>迭代次数多，迭代次数跟函数调用的次数相等。</li><li>频繁产生中间结果，存储开销无法接受。</li></ol><p>流处理可以立即对事件做出反应，且可以处理比其他数据处理系统大得多的数据量：直接处理事件流，并且只保留数据中有意义的子集。尤其是面对持续生成，本质上是无穷尽的数据集。</p><h3 id="java-stream-类" tabindex="-1">Java Stream 类 <a class="header-anchor" href="#java-stream-类" aria-label="Permalink to &quot;Java Stream 类&quot;">​</a></h3><p>JDK 1.8 新增。将要处理的元素集合看作一种流，在管道的节点上进行处理。使代码更简洁易读。</p><p>集合接口有两个方法来生成流，数据类型将由 Collection 转化为 Stream 。</p><ul><li><code>stream</code> 方法：为集合创建串行流。</li><li><code>parallelStream</code> 方法：为集合创建并行流。</li></ul><ol><li><p>Stream 的遍历方式和结果与 Iterator 无差别（便于转化），其优势在于其原型链的设计使得它可以对遍历处理后的数据进行再处理。</p></li><li><p>parallelStream 提供了流的并行处理，底层使用 Fork/Join 框架，简单理解就是多线程异步任务的一种实现。处理过程中会有多个线程处理元素，具体由 JDK 负责管理。不保证有序性。</p></li><li><p>串行流和并行流之间可以通过 <code>parallel</code> 和 <code>sequential</code> 方法相互转化。</p></li></ol><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Stream</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; stream </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();                     </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 声明作为流处理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">ParellerStream</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; pStream </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> stream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">parallel</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();        </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 转化为并行流</span></span></code></pre></div><h3 id="流操作" tabindex="-1">流操作 <a class="header-anchor" href="#流操作" aria-label="Permalink to &quot;流操作&quot;">​</a></h3><p>流处理的每个操作阶段都会封装到一个 Sink 接口里，处理数据后再将数据传递给下游的 Sink。</p><p>Stream 上的所有操作分为两类：中间操作和结束操作。Stream 是延迟执行的，只有调用到结束操作，才触发整个流水线的执行。如果未定义结束操作，那么流处理什么也不会做。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 获取空字符串的数量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> strings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">parallelStream</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">()                       </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 声明作为流处理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">                   .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(string </span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> string.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">())     </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 中间操作，过滤空元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">                   .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();                               </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 结束操作，计数</span></span></code></pre></div><hr><h2 id="中间操作" tabindex="-1">中间操作 <a class="header-anchor" href="#中间操作" aria-label="Permalink to &quot;中间操作&quot;">​</a></h2><h3 id="映射-map" tabindex="-1">映射 map <a class="header-anchor" href="#映射-map" aria-label="Permalink to &quot;映射 map&quot;">​</a></h3><p><code>map</code> 方法用于映射每个元素到对应的结果，其实就是对结果进行转化。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 获取对应的平方数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">asList</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; squaresList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">( i </span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">i).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(Collectors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">());</span></span></code></pre></div><h3 id="过滤-filter" tabindex="-1">过滤 filter <a class="header-anchor" href="#过滤-filter" aria-label="Permalink to &quot;过滤 filter&quot;">​</a></h3><p><code>filter</code> 方法用于通过设置的条件过滤出元素。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">strings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">asList</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">abc</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">bc</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">efg</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">abcd</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">jkl</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 获取空字符串的数量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> strings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(string </span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> string.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span></code></pre></div><h3 id="筛选-limit-skip" tabindex="-1">筛选 limit/skip <a class="header-anchor" href="#筛选-limit-skip" aria-label="Permalink to &quot;筛选 limit/skip&quot;">​</a></h3><p><code>limit</code> 方法用于获取指定数量的流(前 n 个)， <code>skip</code> 方法用于去除指定数量的流(前 n 个)。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 筛选出 11-20 条数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Random</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> random </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> Random</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">ints</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">limit</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">skip</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(System.out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">println);</span></span></code></pre></div><h3 id="排序-sorted" tabindex="-1">排序 sorted <a class="header-anchor" href="#排序-sorted" aria-label="Permalink to &quot;排序 sorted&quot;">​</a></h3><p><code>sorted</code> 方法通过 Comparable 接口对流进行排序，也可以自定义。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Random</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> random </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> Random</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">ints</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">limit</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">sorted</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(System.out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">println);</span></span></code></pre></div><h3 id="去重-distinct" tabindex="-1">去重 distinct <a class="header-anchor" href="#去重-distinct" aria-label="Permalink to &quot;去重 distinct&quot;">​</a></h3><p><code>distinct</code> 方法通过流元素的 hashCode 和 equals 方法去除重复元素。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Random</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> random </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> Random</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">ints</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(System.out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">println);</span></span></code></pre></div><hr><h2 id="结束操作" tabindex="-1">结束操作 <a class="header-anchor" href="#结束操作" aria-label="Permalink to &quot;结束操作&quot;">​</a></h2><h3 id="迭代-foreach" tabindex="-1">迭代 forEach <a class="header-anchor" href="#迭代-foreach" aria-label="Permalink to &quot;迭代 forEach&quot;">​</a></h3><p>结束操作： <code>forEach</code> 迭代流中的每个数据，即对每个数据进行最后的处理（比如保存到数据库中或打印）。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 输出 10 个随机数 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Random</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> random </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> Random</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">ints</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">limit</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(System.out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">::</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">println);</span></span></code></pre></div><blockquote><p>不要用 forEach 方法收集元素！stream 并行执行会损害正确性和效率，使用下方操作。</p></blockquote><h3 id="聚合-collectors" tabindex="-1">聚合 Collectors <a class="header-anchor" href="#聚合-collectors" aria-label="Permalink to &quot;聚合 Collectors&quot;">​</a></h3><p>结束操作：<code>Collectors</code> 类实现了归约操作，例如将流转换成集合和聚合元素，可用于返回列表或字符串。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// Stream 转化为 List</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">strings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">asList</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">abc</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">bc</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">efg</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">abcd</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">jkl</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; filtered </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> strings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">                               .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(string </span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">string.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">                               .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(Collectors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">()); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">筛选列表: </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> filtered);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// Stream 转化为 String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> mergedString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> strings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">                             .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(string </span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">string.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">                             .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(Collectors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">joining</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">合并字符串: </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> mergedString);</span></span></code></pre></div><h3 id="统计-summarystatistics" tabindex="-1">统计 SummaryStatistics <a class="header-anchor" href="#统计-summarystatistics" aria-label="Permalink to &quot;统计 SummaryStatistics&quot;">​</a></h3><p>结束操作：收集最终产生的统计结果，它们主要用于 int、double、long 等基本类型上。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">asList</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">IntSummaryStatistics</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> stats </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">                                    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">mapToInt</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">((x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> x)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">                                    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">summaryStatistics</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">列表中最大的数 : </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> stats.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">getMax</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">列表中最小的数 : </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> stats.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">getMin</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">所有数之和 : </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> stats.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">getSum</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">平均数 : </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> stats.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">getAverage</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">());</span></span></code></pre></div>`,47),n=[k];function l(p,e,F,r,d,g){return a(),i("div",null,n)}const o=s(h,[["render",l]]);export{E as __pageData,o as default};
