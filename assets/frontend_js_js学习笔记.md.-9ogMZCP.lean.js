import{_ as k,E as t,c as e,J as a,m as i,w as h,a as s,a4 as l,o as d}from"./chunks/framework.K9vKjHgL.js";const K=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/js/js学习笔记.md","filePath":"frontend/js/js学习笔记.md"}'),F={name:"frontend/js/js学习笔记.md"},r=l("",16),o=l("",30),g=l("",62),c=l("",7),y=i("code",null,"e",-1),E=i("code",null,"x",-1),C=i("code",null,"+",-1),u=i("code",null,"+",-1),D=i("code",null,"x",-1),b=i("code",null,"e",-1),A=i("code",null,"-",-1),v=i("code",null,"x",-1),f=l("",25),B=i("code",null,"parseInt",-1),_=i("li",null,[i("p",null,"如果字符串头部有空格，空格会被自动去除。")],-1),q=i("li",null,[i("p",null,"字符串转为整数的时候，是一个个字符依次转换，如果遇到不能转为数字的字符，就不再进行下去，返回已经转好的部分。")],-1),m=i("code",null,"+",-1),j=i("code",null,"-",-1),P=i("code",null,"NaN",-1),x=l("",1),N=l("",47),w=l("",3),S=l("",85),I=l("",79),O=i("code",null,"configurable",-1),T=i("code",null,"true",-1),J=i("code",null,"false",-1),U=i("strong",null,"删除该属性",-1),V=i("strong",null,"不得改变该属性的属性描述对象",-1),H=i("code",null,"configurable",-1),R=l("",31);function M(X,L,z,$,W,Z){const p=t("Banner"),n=t("font");return d(),e("div",null,[a(p),r,i("p",null,[i("strong",null,[a(n,{color:"red"},{default:h(()=>[s("undefined：表示变量定义了，但没有赋值")]),_:1})])]),i("p",null,[i("strong",null,[a(n,{color:"orange"},{default:h(()=>[s("not defined：表示变量未定义，没有声明")]),_:1})])]),o,a(n,{color:"red"},{default:h(()=>[s("`do...while`循环与`while`循环类似，唯一的区别就是先运行一次循环体，然后判断循环条件。")]),_:1}),g,a(n,{color:"red"},{default:h(()=>[s("如果一个数大于等于 2 的 1024 次方，那么就会发生“正向溢出”，即 JavaScript 无法表示这么大的数，这时就会返回`Infinity`。")]),_:1}),c,i("p",null,[y,s("后面直接跟着数字"),E,s("，表示省略了"),C,s("号，和带"),u,s("号的效果一样，表示小数点"),a(n,{color:"red"},{default:h(()=>[s("向右")]),_:1}),s("移动"),D,s("位数")]),i("p",null,[s("如果"),b,s("后面跟着"),A,s("号，即表示小数点"),a(n,{color:"red"},{default:h(()=>[s("向左")]),_:1}),s("移动"),v,s("位数")]),f,i("p",null,[i("strong",null,[B,s("方法用于将"),a(n,{color:"red"},{default:h(()=>[s("字符串")]),_:1}),s("转为整数。")])]),i("ul",null,[_,i("li",null,[a(n,{color:"blue"},{default:h(()=>[s("如果`parseInt`的参数不是字符串，则会先转为字符串再转换。")]),_:1})]),q,i("li",null,[i("p",null,[s("如果字符串的第一位不是数字"),a(n,{color:"red"},{default:h(()=>[s("(除了"),m,s("，"),j,s("号)，")]),_:1}),s("则返回的结果的"),P]),x])]),N,i("p",null,[s("对象的每一个键名又称为“属性”（property），它的“键值”可以是任何数据类型。"),a(n,{color:"red"},{default:h(()=>[s("如果一个属性的值为函数，通常把这个属性称为“方法”")]),_:1}),s(">，它可以像函数那样调用。")]),w,i("p",null,[s("此时，如果取消某一个变量对于原对象的引用，不会影响到另一个变量。因为赋值的时候是把内存地址赋值给变量。但这种情况只限于"),a(n,{color:"red"},{default:h(()=>[s("复杂类型")]),_:1})]),i("p",null,[s("如果是"),a(n,{color:"blue"},{default:h(()=>[s("基本数据类型")]),_:1}),s("，这种赋值是对**"),a(n,{color:"orange"},{default:h(()=>[s("值")]),_:1}),s("**的拷贝，并不是拷贝内存地址，所以两个变量不会互相影响")]),S,a(n,{color:"red"},{default:h(()=>[s("`eval`的本质是在当前作用域之中，注入代码。由于安全风险和不利于 JavaScript 引擎优化执行速度，所以一般不推荐使用。")]),_:1}),I,i("p",null,[O,s("是一个布尔值，表示可配置性，默认为"),T,s("。如果设为"),J,s("，将阻止某些操作改写该属性，比如无法"),a(n,{color:"red"},{default:h(()=>[U]),_:1}),s("，也"),a(n,{color:"red"},{default:h(()=>[V]),_:1}),s("。也就是说，"),H,s("属性控制了属性描述对象的可写性。")]),R])}const Q=k(F,[["render",M]]);export{K as __pageData,Q as default};
