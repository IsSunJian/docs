import{_ as i,c as s,o as a,a4 as n}from"./chunks/framework.K9vKjHgL.js";const c=JSON.parse('{"title":"Spring","description":"","frontmatter":{},"headers":[],"relativePath":"java/javaee/spring/Spring.md","filePath":"java/javaee/spring/Spring.md"}'),t={name:"java/javaee/spring/Spring.md"},l=n(`<h1 id="spring" tabindex="-1">Spring <a class="header-anchor" href="#spring" aria-label="Permalink to &quot;Spring&quot;">​</a></h1><hr><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><h3 id="spring-1" tabindex="-1">Spring <a class="header-anchor" href="#spring-1" aria-label="Permalink to &quot;Spring&quot;">​</a></h3><p>Spring 是用于开发 Java 应用程序的开源框架，为解决企业应用开发的复杂性而创建。</p><ol><li>Spring 的基本设计思想是利用 IOC（依赖注入）和 AOP （面向切面）解耦应用组件，降低应用程序各组件之间的耦合度。</li><li>在这两者的基础上，Spring 逐渐衍生出了其他的高级功能：如 Security，JPA 等。</li></ol><h3 id="spring-mvc" tabindex="-1">Spring MVC <a class="header-anchor" href="#spring-mvc" aria-label="Permalink to &quot;Spring MVC&quot;">​</a></h3><p>Spring MVC 是 Spring 的子功能模块，专用于 Web 开发。</p><p>Spring MVC 基于 Servlet 实现，将 Web 应用中的数据业务、显示逻辑和控制逻辑进行分层设计。开发者可以直接调用 Spring MVC 框架中 Spring 解耦的组件，快速构建 Web 应用。</p><h3 id="spring-boot" tabindex="-1">Spring Boot <a class="header-anchor" href="#spring-boot" aria-label="Permalink to &quot;Spring Boot&quot;">​</a></h3><p>Spring Boot 是用于简化创建 Spring 项目配置流程，快速构建 Spring 应用程序的辅助工具。Spring Boot 本身并不提供 Spring 框架的核心特性以及扩展功能。但 在创建 Spring 项目时，Spring Boot 可以：</p><ol><li>自动添加 Maven 依赖，不需要在 pom.xml 中手动添加配置依赖。</li><li>不需要配置 XML 文件，将全部配置浓缩在一个 appliaction.yml 配置文件中。</li><li>自动创建启动类，代表着本工程项目和服务器的启动加载。</li><li>内嵌 Tomcat 、Jetty 等容器，无需手动部署 war 文件。</li></ol><hr><h2 id="spring-boot-配置" tabindex="-1">Spring Boot 配置 <a class="header-anchor" href="#spring-boot-配置" aria-label="Permalink to &quot;Spring Boot 配置&quot;">​</a></h2><h3 id="依赖" tabindex="-1">依赖 <a class="header-anchor" href="#依赖" aria-label="Permalink to &quot;依赖&quot;">​</a></h3><p>在Spring Boot中，引入的所有包都是 starter 形式：</p><p>spring-boot-starter-web-services，针对 SOAP Web Services spring-boot-starter-web，针对 Web 应用与网络接口 spring-boot-starter-jdbc，针对 JDBC spring-boot-starter-data-jpa，基于 Hibernate 的持久层框架 spring-boot-starter-cache，针对缓存支持</p><h3 id="默认映射路径" tabindex="-1">默认映射路径 <a class="header-anchor" href="#默认映射路径" aria-label="Permalink to &quot;默认映射路径&quot;">​</a></h3><ul><li><code>classpath:/META-INF/resources/</code></li><li><code>classpath:/resources/</code></li><li><code>classpath:/static/</code></li><li><code>classpath:/public/</code></li></ul><p>优先级顺序：META-INF/resources &gt; resources &gt; static &gt; public</p><h3 id="全局配置" tabindex="-1">全局配置 <a class="header-anchor" href="#全局配置" aria-label="Permalink to &quot;全局配置&quot;">​</a></h3><p>位于 resources 文件夹下，支持以下两种格式。由 Spring Boot 自动加载。</p><ol><li>application.properties</li><li>application.yml</li></ol><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">#端口号</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">server.port</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">8080</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">#访问前缀</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">server.servlet.context-path</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">/demo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">#数据库驱动</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">jdbc.driver</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">com.mysql.jc.jdbc.Driver</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">#数据库链接</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">jdbc.url</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">jdbc:mysql://localhost:3306/demo?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">useUnicode</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">true&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">characterEncoding</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">utf8&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">useSSL</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">false&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">serverTimezone</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">UTC</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">#数据库用户名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">jdbc.username</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">root</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">#数据库密码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">jdbc.password</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">wdh19970506</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">#Mybatis</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">#配置文件路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">mybatis_config_file</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">mybatis-config.xml</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">#SQL语句配置路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">mapper_path</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">/mapper/**.xml</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">#实体类所在包</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">type_alias_package</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">com.example.demo.entity</span></span></code></pre></div><ul><li>JDBC 连接 Mysql5 驱动： com.mysql.jdbc.Driver</li><li>JDBC 连接 Mysql6 驱动： com.mysql.cj.jdbc.Driver , URL 必须要指定时区 serverTimezone ！</li></ul><p><strong>多重配置</strong></p><p>在 Spring Boot 中，我们往往需要配置多个不同的配置文件去适应不同的环境：</p><ul><li><code>application-dev.properties</code> 开发环境</li><li><code>application-test.properties</code> 测试环境</li><li><code>application-prod.properties</code> 生产环境</li></ul><p>只需要在程序默认配置文件 <code>application.properties</code> 中设置环境，就可以使用指定的配置。</p><div class="language-properties vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">spring.profiles.active</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">dev</span></span></code></pre></div><h3 id="启动类" tabindex="-1">启动类 <a class="header-anchor" href="#启动类" aria-label="Permalink to &quot;启动类&quot;">​</a></h3><p><code>@SpringBootApplication</code> 类：作为程序入口，在创建 Spring Boot 项目时自动创建。</p><p>等同于 <code>@Configuration</code> + <code>@EnableAutoConfiguration</code> + <code>@ComponentScan</code> ，会自动完成配置并扫描路径下所有包。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> DemoApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        SpringApplication.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(DemoApplication.class, args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><hr><p>Spring 需要定义调度程序 servlet ，映射和其他支持配置。我们可以使用 web.xml 文件或 Initializer 类来完成此操作：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> MyWebAppInitializer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> WebApplicationInitializer</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> onStartup</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">ServletContext</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> container</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        AnnotationConfigWebApplicationContext</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> AnnotationConfigWebApplicationContext</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">setConfigLocation</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">com.pingfangushi</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">          container.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">addListener</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> ContextLoaderListener</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(context));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">          ServletRegistration</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Dynamic</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> dispatcher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> container</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">          .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">addServlet</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">dispatcher</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> DispatcherServlet</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(context));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        dispatcher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">setLoadOnStartup</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        dispatcher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">addMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p>还需要将 <code>@EnableWebMvc</code> 注释添加到 <code>@Configuration</code> 类，并定义一个视图解析器来解析从控制器返回的视图：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">EnableWebMvc</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> ClientWebConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> WebMvcConfigurer</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">   @</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">   public</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> ViewResolver</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> viewResolver</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">      InternalResourceViewResolver</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">        =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> InternalResourceViewResolver</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">      bean.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">setViewClass</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(JstlView.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">      bean.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">setPrefix</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">/WEB-INF/view/</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">      bean.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">setSuffix</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">.jsp</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> bean;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div>`,39),h=[l];function p(e,k,r,d,o,F){return a(),s("div",null,h)}const y=i(t,[["render",p]]);export{c as __pageData,y as default};
