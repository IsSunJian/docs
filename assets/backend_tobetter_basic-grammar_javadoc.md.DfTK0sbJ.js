import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.-JfgED0h.js";const t="/docs/assets/fourteen-01.DRa_So0t.png",e="/docs/assets/fourteen-02.eYcXlPJ8.png",l="/docs/assets/fourteen-03.DjFCT4Z_.png",p="/docs/assets/fourteen-04.D40rSP6x.png",h="/docs/assets/fourteen-05.DR0t5fl1.png",k="/docs/assets/fourteen-06.83JUkSps.png",r="/docs/assets/fourteen-07.BbFbhT3_.png",d="/docs/assets/fourteen-08.D8oR3LjG.png",o="/docs/assets/fourteen-09.S7uDoPhD.png",c="/docs/assets/fourteen-10.B-U4AAj0.png",b=JSON.parse('{"title":"了解Java注释：单行、多行与文档注释的使用方法","description":"本文详细介绍了Java编程中使用的三种注释方式：单行、多行和文档注释。通过对这三种注释类型的讲解和示例，您将了解它们的应用场景和使用技巧，提高代码的可读性和维护性。","frontmatter":{"title":"了解Java注释：单行、多行与文档注释的使用方法","shortTitle":"Java注释","category":["Java核心"],"tag":["Java语法基础"],"description":"本文详细介绍了Java编程中使用的三种注释方式：单行、多行和文档注释。通过对这三种注释类型的讲解和示例，您将了解它们的应用场景和使用技巧，提高代码的可读性和维护性。","head":[["meta",{"name":"keywords","content":"Java, 注释, 单行注释, 多行注释, 文档注释"}]]},"headers":[],"relativePath":"backend/tobetter/basic-grammar/javadoc.md","filePath":"backend/tobetter/basic-grammar/javadoc.md"}'),g={name:"backend/tobetter/basic-grammar/javadoc.md"},F=n('<h1 id="_3-2-java注释" tabindex="-1">3.2 Java注释 <a class="header-anchor" href="#_3-2-java注释" aria-label="Permalink to &quot;3.2 Java注释&quot;">​</a></h1><p>“二哥，Java 中的注释好像真没什么可讲的，我已经提前预习了，不过是单行注释，多行注释，还有文档注释。”三妹的脸上泛着甜甜的笑容，她竟然提前预习了接下来要学习的知识，有一种“士别三日，当刮目相看”的感觉。</p><p>“注释的种类确实不多，但还是挺有意思的，且听哥来给你说道说道。”</p><img src="'+t+`"><h3 id="_01、单行注释" tabindex="-1">01、单行注释 <a class="header-anchor" href="#_01、单行注释" aria-label="Permalink to &quot;01、单行注释&quot;">​</a></h3><p>单行注释通常用于解释方法内某单行代码的作用。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// age 用于表示年龄</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p><strong>但如果写在行尾的话，其实是不符合阿里巴巴的开发规约的</strong>。</p><img src="`+e+`"><p>正确的单行注释如上图中所说，在被注释语句上方另起一行，使用 <code>//</code> 注释。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // age 用于表示年龄</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><h3 id="_02、多行注释" tabindex="-1">02、多行注释 <a class="header-anchor" href="#_02、多行注释" aria-label="Permalink to &quot;02、多行注释&quot;">​</a></h3><p>多行注释使用的频率其实并不高，通常用于解释一段代码的作用。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">age 用于表示年纪</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">name 用于表示姓名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">沉默王二</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">;</span></span></code></pre></div><p>以 <code>/*</code> 开始，以 <code>*/</code> 结束，但不如用多个 <code>//</code> 来得痛快，因为 <code>*</code> 和 <code>/</code> 不在一起，敲起来麻烦。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// age 用于表示年纪</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// name 用于表示姓名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">沉默王二</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">;</span></span></code></pre></div><h3 id="_03、文档注释" tabindex="-1">03、文档注释 <a class="header-anchor" href="#_03、文档注释" aria-label="Permalink to &quot;03、文档注释&quot;">​</a></h3><p>文档注释可用在三个地方，类、字段和方法，用来解释它们是干嘛的。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> * 微信搜索「沉默王二」，回复 Java</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> Demo</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">     * 姓名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> age;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">     * main 方法作为程序的入口</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">     *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> args</span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> 参数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p>PS：在 Intellij IDEA 中，按下 <code>/**</code> 后敲下回车键就可以自动添加文档注释的格式，<code>*/</code> 是自动补全的。</p><p>接下来，我们来看看如何通过 javadoc 命令生成代码文档。</p><p><strong>第一步</strong>，在该类文件上右键，找到「Open in Terminal」 可以打开命令行窗口。</p><img src="`+l+'"><p><strong>第二步</strong>，执行 javadoc 命令 <code>javadoc Demo.java -encoding utf-8</code>。<code>-encoding utf-8</code> 可以保证中文不发生乱码。</p><img src="'+p+'"><p>**第三步，**执行 <code>ls -l</code> 命令就可以看到生成代码文档时产生的文件，主要是一些可以组成网页的 html、js 和 css 文件。</p><img src="'+h+'"><p><strong>第四步</strong>，执行 <code>open index.html</code> 命令可以通过默认的浏览器打开文档注释。</p><img src="'+k+'"><p>点击「Demo」，可以查看到该类更具体的注释文档。</p><img src="'+r+'"><h3 id="_04、文档注释的注意事项" tabindex="-1">04、文档注释的注意事项 <a class="header-anchor" href="#_04、文档注释的注意事项" aria-label="Permalink to &quot;04、文档注释的注意事项&quot;">​</a></h3><p>1）<code>javadoc</code> 命令只能为 public 和 protected 修饰的字段、方法和类生成文档。</p><p>default 和 private 修饰的字段和方法的注释将会被忽略掉。因为我们本来就不希望这些字段和方法暴露给调用者。</p><p>如果类不是 public 的话，javadoc 会执行失败。</p><img src="'+d+'"><p>2）文档注释中可以嵌入一些 HTML 标记，比如说段落标记 <code>&lt;p&gt;</code>，超链接标记 <code>&lt;a&gt;&lt;/a&gt;</code> 等等，但不要使用标题标记，比如说 <code>&lt;h1&gt;</code>，因为 javadoc 会插入自己的标题，容易发生冲突。</p><p>3）文档注释中可以插入一些 <code>@</code> 注解，比如说 <code>@see</code> 引用其他类，<code>@version</code> 版本号，<code>@param</code> 参数标识符，<code>@author</code> 作者标识符，<code>@deprecated</code> 已废弃标识符，等等。</p><h3 id="_05、注释规约" tabindex="-1">05、注释规约 <a class="header-anchor" href="#_05、注释规约" aria-label="Permalink to &quot;05、注释规约&quot;">​</a></h3><p>1）类、字段、方法必须使用文档注释，不能使用单行注释和多行注释。因为注释文档在 IDE 编辑窗口中可以悬浮提示，提高编码效率。</p><p>比如说，在使用 <a href="https://tobebetterjavaer.com/string/immutable.html" target="_blank" rel="noreferrer">String 类</a>的时候，鼠标悬停在 String 上时可以得到以下提示。</p><img src="'+o+'"><p>2）所有的<a href="https://tobebetterjavaer.com/oo/abstract.html" target="_blank" rel="noreferrer">抽象方法</a>(包括接口中的方法)必须要用 Javadoc 注释、除了返回值、参数、 异常说明外，还必须指出该方法做什么事情，实现什么功能。</p><p>3）所有的类都必须添加创建者和创建日期。</p><p>Intellij IDEA 中可以在「File and Code Templates」中设置。</p><img src="'+c+`"><p>语法如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>/**</span></span>
<span class="line"><span>* 微信搜索「沉默王二」，回复 Java</span></span>
<span class="line"><span>* @author 沉默王二</span></span>
<span class="line"><span>* @date \${DATE}</span></span>
<span class="line"><span>*/</span></span></code></pre></div><p>设置好后，在新建一个类的时候就可以自动生成了。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> * 微信搜索「沉默王二」，回复 Java</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">@author</span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> 沉默王二</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> * @date 2020/11/16</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p>4）所有的<a href="https://tobebetterjavaer.com/basic-extra-meal/enum.html" target="_blank" rel="noreferrer">枚举</a>类型字段必须要有注释，说明每个数据项的用途。</p><p>5）代码修改的同时，注释也要进行相应的修改。</p><p>“好了，三妹，关于 Java 中的注释就先说这么多吧。”转动了一下僵硬的脖子后，我对三妹说。“记住一点，注释是程序固有的一部分。”</p><ul><li>第一、注释要能够准确反映设计思想和代码逻辑;</li><li>第二、注释要能够描述业务含 义，使别的程序员能够迅速了解到代码背后的信息。</li></ul><p>完全没有注释的大段代码对于阅读者形同 天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路;注释也是给继任者看 的，使其能够快速接替自己的工作。</p><hr>`,56),y=[F];function v(m,u,E,D,f,_){return a(),i("div",null,y)}const A=s(g,[["render",v]]);export{b as __pageData,A as default};
