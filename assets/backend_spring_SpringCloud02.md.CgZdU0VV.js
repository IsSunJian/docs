import{_ as a,c as s,o as n,a4 as e}from"./chunks/framework.K9vKjHgL.js";const p="/docs/assets/springcloud_02_jishus.BtXeOJ-H.jpg",t="/docs/assets/image-20210714164426792.BJpotaIz.png",i="/docs/assets/image-20210714164742924.ruL9yieH.png",l="/docs/assets/image-20210714164856664.D-LDsF7f.png",o="/docs/assets/L0iFYNF.DY6sncpP.png",r="/docs/assets/image-20210714170845901.BU5nmeGT.png",c="/docs/assets/image-20210714170337448.DFA7_2NX.png",d="/docs/assets/image-20210714170449612.C9qvDvAL.png",g="/docs/assets/image-20210714171036335.D54dtdNN.png",u="/docs/assets/image-20210714171316124.ufR3TMCa.png",h="/docs/assets/springcloud_02_mooreconifg.D86Emh38.png",m="/docs/assets/image-20210714174623557.tYdkLdRr.png",b="/docs/assets/image-20210714173233650.Cvy4myDU.png",f="/docs/assets/image-20210714173324231.Dpxb5q0X.png",v="/docs/assets/image-20210714173721309.DNCsH7xG.png",_="/docs/assets/image-20210714173538538.DpdBkjKo.png",C="/docs/assets/image-20210714173519963.CJ7yVNCm.png",q="/docs/assets/image-20210714174313344.CzNXKwjv.png",y="/docs/assets/image-20210714174424818.CkwgzfmA.png",k="/docs/assets/image-20210714174728042.CHZitUos.png",P="/docs/assets/image-20210714175102524.DZ5cY1ZR.png",F="/docs/assets/image-20210714175415087.CMzn26dW.png",w="/docs/assets/image-20210714185925910.DWfaiOO0.png",x="/docs/assets/image-20210714190041542.Cnrzhedb.png",S="/docs/assets/image-20210714190542730.BPraOFj9.png",A="/docs/assets/image-20210714190528450.CQrKCsuU.png",I="/docs/assets/image-20210714190640857.fGdUYchZ.png",R="/docs/assets/image-20210714214041796.icpWCnVK.png",U="/docs/assets/image-20210714204557771.CTAYunsc.png",D="/docs/assets/image-20210714204656214.CLSeiAE_.png",L="/docs/assets/image-20210714205221970.BAUINFSH.png",B="/docs/assets/image-20210714205623048._Bg_q54a.png",G="/docs/assets/image-20210714210131152.BwAWZ11X.png",T="/docs/assets/image-20210714210919458.BO-p_LK-.png",E="/docs/assets/image-20210714211742956.kFb3eF8_.png",H="/docs/assets/image-20210714212312871.BC708Ssu.png",N="/docs/assets/image-20210714214228409.DmD6JoYL.png",O="/docs/assets/image-20210714215713563.UGkTuu7x.png",M="/docs/assets/image-20210714215832675.iM29VmX0.png",aa=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"backend/spring/SpringCloud02.md","filePath":"backend/spring/SpringCloud02.md"}'),V={name:"backend/spring/SpringCloud02.md"},j=e('<h2 id="springcloud实用篇02" tabindex="-1">SpringCloud实用篇02 <a class="header-anchor" href="#springcloud实用篇02" aria-label="Permalink to &quot;SpringCloud实用篇02&quot;">​</a></h2><h2 id="_1-nacos配置管理" tabindex="-1">1.Nacos配置管理 <a class="header-anchor" href="#_1-nacos配置管理" aria-label="Permalink to &quot;1.Nacos配置管理&quot;">​</a></h2><p>Nacos除了可以做注册中心，同样可以做配置管理来使用。</p><p><img src="'+p+'" alt="微服务技术"></p><p>微服务技术</p><h3 id="_1-1-统一配置管理" tabindex="-1">1.1.统一配置管理 <a class="header-anchor" href="#_1-1-统一配置管理" aria-label="Permalink to &quot;1.1.统一配置管理&quot;">​</a></h3><p>统一配置管理</p><p>当<strong>微服务部署的实例越来越多</strong>，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且很容易出错。我们需要一种<strong>统一配置管理方案，可以集中管理所有实例的配置</strong>🎯。</p><p><img src="'+t+'" alt="image-20210714164426792"></p><p>**Nacos作为配置中心的特点：**👇</p><ul><li>一方面可以将配置集中管理，</li><li>另一方可以在配置变更时，及时通知微服务，实现配置的热更新。</li></ul><p>**代码操作步骤：**👇</p><ol><li>在nacos中添加配置文件</li><li>从微服务拉取配置 <ul><li>引入nacos-config依赖</li><li>添加bootstrap.yaml</li><li>读取nacos配置</li></ul></li><li>测试</li></ol><h4 id="在nacos中添加配置文件" tabindex="-1">在nacos中添加配置文件 <a class="header-anchor" href="#在nacos中添加配置文件" aria-label="Permalink to &quot;在nacos中添加配置文件&quot;">​</a></h4><p>如何在nacos中管理配置呢？</p><p><img src="'+i+'" alt="image-20210714164742924"></p><p>然后在弹出的表单中，填写配置信息：</p><p>DataID：服务名称-环境名.yaml</p><p>Group:默认即可</p><p>配置格式：Yaml</p><p><img src="'+l+'" alt="image-20210714164856664"></p><blockquote><p>注意：<strong>项目的核心配置，需要热更新的配置才有放到nacos管理的必要</strong>注意。基本不会变更的一些配置还是保存在微服务本地比较好如：数据库信息。</p></blockquote><h4 id="从微服务拉取配置" tabindex="-1">从微服务拉取配置 <a class="header-anchor" href="#从微服务拉取配置" aria-label="Permalink to &quot;从微服务拉取配置&quot;">​</a></h4><p><strong>微服务要拉取nacos中管理的配置，并且与本地的application.yml配置合并，才能完成项目启动。</strong></p><ol><li>如果尚未读取application.yml，无法得知nacos地址，进而无法连接配置中心 <ul><li>因此spring引入了一种新的配置文件：<code>bootstrap.yaml/yml文件</code>，会在<code>application.yml</code>之前被读取，流程如下：</li></ul></li></ol><p><img src="'+o+`" alt="img"></p><p>img</p><h5 id="_1️⃣-引入nacos-config依赖" tabindex="-1">1️⃣ 引入nacos-config依赖 <a class="header-anchor" href="#_1️⃣-引入nacos-config依赖" aria-label="Permalink to &quot;1️⃣ 引入nacos-config依赖&quot;">​</a></h5><p>首先，在<code>user-service服务</code>中，引入nacos-config的客户端依赖：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>&lt;!--nacos配置管理依赖--&gt;</span></span>
<span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div><h5 id="_2️⃣-添加bootstrap-yaml" tabindex="-1">2️⃣ 添加bootstrap.yaml <a class="header-anchor" href="#_2️⃣-添加bootstrap-yaml" aria-label="Permalink to &quot;2️⃣ 添加bootstrap.yaml&quot;">​</a></h5><p>然后，在<code>user-service</code>中添加一个<code>bootstrap.yaml</code>文件，内容如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>spring:</span></span>
<span class="line"><span>  application:</span></span>
<span class="line"><span>    name: userservice # 服务名称</span></span>
<span class="line"><span>  profiles:</span></span>
<span class="line"><span>    active: dev #开发环境，这里是dev </span></span>
<span class="line"><span>  cloud:</span></span>
<span class="line"><span>    nacos:</span></span>
<span class="line"><span>      server-addr: localhost:8848 # Nacos地址</span></span>
<span class="line"><span>      config:</span></span>
<span class="line"><span>        file-extension: yaml # 文件后缀名</span></span></code></pre></div><p>这里会根据spring.cloud.nacos.server-addr获取nacos地址，再根据</p><p><code>\${spring.application.name}-\${spring.profiles.active}.\${spring.cloud.nacos.config.file-extension}</code>作为文件id，来读取配置。</p><p>本例中，就是去读取<code>userservice-dev.yaml</code>： 👇</p><p><img src="`+r+'" alt="image-20210714170845901"></p><h5 id="_3️⃣-读取nacos配置" tabindex="-1">3️⃣ 读取nacos配置 <a class="header-anchor" href="#_3️⃣-读取nacos配置" aria-label="Permalink to &quot;3️⃣ 读取nacos配置&quot;">​</a></h5><p>在<code>user-service</code>中的<code>UserController</code>中添加业务逻辑，读取<code>pattern.dateformat配置</code>：</p><p><img src="'+c+`" alt="image-20210714170337448"></p><p>完整代码：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>@Slf4j</span></span>
<span class="line"><span>@RestController</span></span>
<span class="line"><span>@RequestMapping(&quot;/user&quot;)</span></span>
<span class="line"><span>public class UserController {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Autowired</span></span>
<span class="line"><span>    private UserService userService;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Value(&quot;\${pattern.dateformat}&quot;)</span></span>
<span class="line"><span>    private String dateformat;</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    @GetMapping(&quot;now&quot;)</span></span>
<span class="line"><span>    public String now(){</span></span>
<span class="line"><span>        return LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    // ...略</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>启动各个服务，在页面访问，可以看到效果：</p><p><img src="`+d+'" alt="image-20210714170449612"></p><h3 id="_1-2-配置热更新" tabindex="-1">1.2.配置热更新 <a class="header-anchor" href="#_1-2-配置热更新" aria-label="Permalink to &quot;1.2.配置热更新&quot;">​</a></h3><p>前言</p><p>我们最终的目的，是修改nacos中的配置后，微服务中无需重启即可让配置生效，也就是<strong>配置热更新</strong>。</p><p>要实现配置热更新，可以使用两种方式：</p><h4 id="_1-2-1-方式一" tabindex="-1">1.2.1.方式一 <a class="header-anchor" href="#_1-2-1-方式一" aria-label="Permalink to &quot;1.2.1.方式一&quot;">​</a></h4><p>在<code>@Value</code>注入的变量所在类上添加注解<code>@RefreshScope</code>：</p><p><img src="'+g+`" alt="image-20210714171036335"></p><h4 id="_1-2-2-方式二" tabindex="-1">1.2.2.方式二 <a class="header-anchor" href="#_1-2-2-方式二" aria-label="Permalink to &quot;1.2.2.方式二&quot;">​</a></h4><p>使用<code>@ConfigurationProperties</code>注解代替<code>@Value</code>注解。</p><p>在user-service服务中，添加一个类，读取patterrn.dateformat属性：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>@Component</span></span>
<span class="line"><span>@Data</span></span>
<span class="line"><span>@ConfigurationProperties(prefix = &quot;pattern&quot;)</span></span>
<span class="line"><span>public class PatternProperties {</span></span>
<span class="line"><span>    private String dateformat;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>在UserController中使用这个类代替@Value：</p><p><img src="`+u+`" alt="image-20210714171316124"></p><p><strong>完整代码：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>@Slf4j</span></span>
<span class="line"><span>@RestController</span></span>
<span class="line"><span>@RequestMapping(&quot;/user&quot;)</span></span>
<span class="line"><span>public class UserController {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Autowired</span></span>
<span class="line"><span>    private UserService userService;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Autowired</span></span>
<span class="line"><span>    private PatternProperties patternProperties;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @GetMapping(&quot;now&quot;)</span></span>
<span class="line"><span>    public String now(){</span></span>
<span class="line"><span>        return LocalDateTime.now().format(DateTimeFormatter.ofPattern(patternProperties.getDateformat()));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 略</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="_1-3-配置共享" tabindex="-1">1.3.配置共享 <a class="header-anchor" href="#_1-3-配置共享" aria-label="Permalink to &quot;1.3.配置共享&quot;">​</a></h3><p>前言</p><p>其实<strong>微服务启动时，会去nacos读取多个配置文件</strong>，例如：</p><ul><li><p><code>[spring.application.name]-[spring.profiles.active].yaml</code>如：userservice-dev.yaml</p></li><li><p><code>[spring.application.name].yaml</code>如：userservice.yaml</p></li></ul><p>而<code>[spring.application.name].yaml</code>不包含环境如：userservice.yaml，<strong>因此可以被多个环境共享</strong>。</p><p><img src="`+h+'" alt=""></p><p><strong>配置共享的优先级</strong> 👇</p><p>当nacos、服务本地同时出现相同属性时，优先级有高低之分： <img src="'+m+'" alt="image-20210714174623557"></p><p>**案例代码验证操作：**👇👇</p><h4 id="_1-添加一个环境共享配置" tabindex="-1">1）添加一个环境共享配置 <a class="header-anchor" href="#_1-添加一个环境共享配置" aria-label="Permalink to &quot;1）添加一个环境共享配置&quot;">​</a></h4><p>我们在nacos中添加一个<code>userservice.yaml文件</code>：</p><p><img src="'+b+'" alt="image-20210714173233650"></p><h4 id="_2-在user-service中读取共享配置" tabindex="-1">2）在user-service中读取共享配置 <a class="header-anchor" href="#_2-在user-service中读取共享配置" aria-label="Permalink to &quot;2）在user-service中读取共享配置&quot;">​</a></h4><p>在<code>user-service服务中</code>，修改<code>PatternProperties类</code>，读取新添加的属性：</p><p><img src="'+f+'" alt="image-20210714173324231"></p><p>在<code>user-service服务</code>中，修改<code>UserController</code>，添加一个方法：</p><p><img src="'+v+'" alt="image-20210714173721309"></p><h4 id="_3-运行两个userapplication-使用不同的profile" tabindex="-1">3）运行两个UserApplication，使用不同的profile <a class="header-anchor" href="#_3-运行两个userapplication-使用不同的profile" aria-label="Permalink to &quot;3）运行两个UserApplication，使用不同的profile&quot;">​</a></h4><p><code>修改UserApplication2这个启动项，改变其profile值</code>：</p><p><img src="'+_+'" alt="image-20210714173538538"></p><p><img src="'+C+'" alt="image-20210714173519963"></p><p><strong>UserApplication(8081)使用的profile是dev，UserApplication2(8082)使用的profile是test</strong>。👈</p><p>启动UserApplication和UserApplication2</p><p>访问<a href="http://localhost:8081/user/prop%EF%BC%8C%E7%BB%93%E6%9E%9C%EF%BC%9A" target="_blank" rel="noreferrer">http://localhost:8081/user/prop，结果：open in new window</a></p><p><img src="'+q+'" alt="image-20210714174313344"></p><p>访问<code>http://localhost:8082/user/prop</code>，结果：</p><p><img src="'+y+'" alt="image-20210714174424818"></p><p>可以看出来，不管是dev，还是test环境，都读取到了envSharedValue这个属性的值。</p><h3 id="_1-4-搭建nacos集群" tabindex="-1">1.4.搭建Nacos集群 <a class="header-anchor" href="#_1-4-搭建nacos集群" aria-label="Permalink to &quot;1.4.搭建Nacos集群&quot;">​</a></h3><p>搭建Nacos集群</p><p>Nacos生产环境下<strong>一定要部署为集群状态</strong>高可用要求，部署方式参考课前资料中的文档下图可点击：</p><p><a href="http://www.yangeit.cn:21010/springcloud2023/nacosColonyIinstall.html" target="_blank" rel="noreferrer"><img src="'+k+`" alt="image-20210714174728042"></a></p><h2 id="_2-feign远程调用" tabindex="-1">2.Feign远程调用 <a class="header-anchor" href="#_2-feign远程调用" aria-label="Permalink to &quot;2.Feign远程调用&quot;">​</a></h2><h3 id="_2-1-feign替代resttemplate" tabindex="-1">2.1.Feign替代RestTemplate <a class="header-anchor" href="#_2-1-feign替代resttemplate" aria-label="Permalink to &quot;2.1.Feign替代RestTemplate&quot;">​</a></h3><p>前言</p><p>使用Feign的步骤：</p><ul><li>① 引入依赖</li><li>② 添加@EnableFeignClients注解</li><li>③ 编写FeignClient接口</li><li>④ 使用FeignClient中定义的方法代替RestTemplate</li></ul><h4 id="_1-引入依赖" tabindex="-1">1）引入依赖 <a class="header-anchor" href="#_1-引入依赖" aria-label="Permalink to &quot;1）引入依赖&quot;">​</a></h4><p>我们在order-service服务的pom文件中引入feign的依赖：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div><h4 id="_2-添加注解" tabindex="-1">2）添加注解 <a class="header-anchor" href="#_2-添加注解" aria-label="Permalink to &quot;2）添加注解&quot;">​</a></h4><p>在order-service的启动类添加<code>注解开启Feign</code>的功能：</p><p><img src="`+P+`" alt="image-20210714175102524"></p><h4 id="_3-编写feign的客户端" tabindex="-1">3）编写Feign的客户端 <a class="header-anchor" href="#_3-编写feign的客户端" aria-label="Permalink to &quot;3）编写Feign的客户端&quot;">​</a></h4><p>在<code>order-service中</code>新建一个接口，内容如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>package cn.itcast.order.client;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@FeignClient(&quot;userservice&quot;)</span></span>
<span class="line"><span>public interface UserClient {</span></span>
<span class="line"><span>    @GetMapping(&quot;/user/{id}&quot;)</span></span>
<span class="line"><span>    User findById(@PathVariable(&quot;id&quot;) Long id);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>这个客户端主要是基于SpringMVC的注解来声明远程调用的信息，比如：</p><ul><li>服务名称：userservice</li><li>请求方式：GET</li><li>请求路径：/user/</li><li>请求参数：Long id</li><li>返回值类型：User</li></ul><p>这样，Feign就可以帮助我们发送http请求，无需自己使用RestTemplate来发送了。</p><h4 id="_4-测试" tabindex="-1">4）测试 <a class="header-anchor" href="#_4-测试" aria-label="Permalink to &quot;4）测试&quot;">​</a></h4><p>修改order-service中的OrderService类中的queryOrderById方法，使用Feign客户端代替RestTemplate：</p><p><img src="`+F+`" alt="image-20210714175415087"></p><p>是不是看起来优雅多了。</p><h3 id="_2-2-自定义配置" tabindex="-1">2.2.自定义配置 <a class="header-anchor" href="#_2-2-自定义配置" aria-label="Permalink to &quot;2.2.自定义配置&quot;">​</a></h3><p>自定义配置</p><p>Feign可以支持很多的自定义配置，如下表所示：</p><table><thead><tr><th>类型</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><strong>feign.Logger.Level</strong> ☝️</td><td>修改日志级别</td><td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td>feign.codec.Decoder</td><td>响应结果的解析器</td><td>http远程调用的结果做解析，例如解析json字符串为java对象</td></tr><tr><td>feign.codec.Encoder</td><td>请求参数编码</td><td>将请求参数编码，便于通过http请求发送</td></tr><tr><td>feign. Contract</td><td>支持的注解格式</td><td>默认是SpringMVC的注解</td></tr><tr><td>feign. Retryer</td><td>失败重试机制</td><td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td></tr></tbody></table><p>一般情况下，默认值就能满足我们使用 ，如果要自定义时，只需要创建自定义的<code>@Bean覆盖默认Bean</code>即可。</p><p>**代码操作（日志例子来演示如何自定义配置）：**👇</p><h4 id="_2-2-1-配置文件方式" tabindex="-1">2.2.1.配置文件方式 <a class="header-anchor" href="#_2-2-1-配置文件方式" aria-label="Permalink to &quot;2.2.1.配置文件方式&quot;">​</a></h4><p>基于<strong>配置文件</strong>修改<strong>feign的日志级别</strong>可以<strong>针对单个服务</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>feign:  </span></span>
<span class="line"><span>  client:</span></span>
<span class="line"><span>    config: </span></span>
<span class="line"><span>      userservice: # 针对某个微服务的配置</span></span>
<span class="line"><span>        loggerLevel: FULL #  日志级别</span></span></code></pre></div><p>也可以<strong>针对所有服务</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>feign:  </span></span>
<span class="line"><span>  client:</span></span>
<span class="line"><span>    config: </span></span>
<span class="line"><span>      default: # 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span></span>
<span class="line"><span>        loggerLevel: FULL #  日志级别</span></span></code></pre></div><p>而日志的级别分为四种：</p><ul><li><strong>NONE：不记录任何日志信息，这是默认值。</strong></li><li>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</li><li>HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</li><li>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li></ul><h4 id="_2-2-2-java代码方式" tabindex="-1">2.2.2.Java代码方式 <a class="header-anchor" href="#_2-2-2-java代码方式" aria-label="Permalink to &quot;2.2.2.Java代码方式&quot;">​</a></h4><p>也可以基于Java代码来修改日志级别，<strong>先声明一个类，然后声明一个Logger.Level的对象</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>public class DefaultFeignConfiguration  {</span></span>
<span class="line"><span>    @Bean</span></span>
<span class="line"><span>    public Logger.Level feignLogLevel(){</span></span>
<span class="line"><span>        return Logger.Level.BASIC; // 日志级别为BASIC</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>如果要<strong>全局生效</strong>，将其放到启动类的<code>@EnableFeignClients</code>这个注解中：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>@EnableFeignClients(defaultConfiguration = DefaultFeignConfiguration .class)</span></span></code></pre></div><p>如果是<strong>局部生效</strong>，则把它放到对应的<code>@FeignClient</code>这个注解中：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>@FeignClient(value = &quot;userservice&quot;, configuration = DefaultFeignConfiguration .class)</span></span></code></pre></div><h3 id="_2-3-feign使用优化" tabindex="-1">2.3.Feign使用优化 <a class="header-anchor" href="#_2-3-feign使用优化" aria-label="Permalink to &quot;2.3.Feign使用优化&quot;">​</a></h3><p>前言</p><p>Feign底层发起<strong>http请求，依赖于其它的框架</strong>。其底层客户端实现包括：</p><ul><li>URLConnection：默认实现，不支持连接池</li><li>Apache HttpClient ：支持连接池</li><li>OKHttp：支持连接池</li></ul><p>因此提高Feign的性能主要手段就是使用<strong>连接池</strong>代替默认的URLConnection 🎯</p><p><strong>这里我们用Apache的HttpClient来演示：</strong> 👇 👇</p><p>1）引入依赖</p><p>在order-service的pom文件中引入Apache的HttpClient依赖：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>&lt;!--httpClient的依赖 --&gt;</span></span>
<span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;io.github.openfeign&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;feign-httpclient&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div><p>2）配置连接池</p><p>在order-service的application.yml中添加配置：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>feign:</span></span>
<span class="line"><span>  client:</span></span>
<span class="line"><span>    config:</span></span>
<span class="line"><span>      default: # default全局的配置</span></span>
<span class="line"><span>        loggerLevel: BASIC # 日志级别，BASIC就是基本的请求和响应信息</span></span>
<span class="line"><span>  httpclient:</span></span>
<span class="line"><span>    enabled: true # 开启feign对HttpClient的支持</span></span>
<span class="line"><span>    max-connections: 200 # 最大的连接数</span></span>
<span class="line"><span>    max-connections-per-route: 50 # 每个路径的最大连接数</span></span></code></pre></div><p>接下来，在FeignClientFactoryBean中的loadBalance方法中打断点：</p><p><img src="`+w+'" alt="image-20210714185925910"></p><p>Debug方式启动order-service服务，可以看到这里的client，底层就是Apache HttpClient：</p><p><img src="'+x+'" alt="image-20210714190041542"></p><p>Feign的优化：</p><ol><li>日志级别尽量用basic</li><li>使用HttpClient或OKHttp代替URLConnection <ul><li>① 引入feign-httpClient依赖</li><li>② 配置文件开启httpClient功能，设置连接池参数</li></ul></li></ol><blockquote><p>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</p></blockquote><h3 id="_2-4-最佳实践" tabindex="-1">2.4.最佳实践 <a class="header-anchor" href="#_2-4-最佳实践" aria-label="Permalink to &quot;2.4.最佳实践&quot;">​</a></h3><p>前言</p><p><strong>所谓最近实践，就是使用过程中总结的经验，最好的一种使用方式。</strong></p><p>自习观察可以发现，<strong>Feign的客户端与服务提供者的controller代码非常相似</strong>：</p><p><strong>feign客户端：</strong></p><p><img src="'+S+'" alt="image-20210714190542730"></p><p><strong>UserController：</strong></p><p><img src="'+A+'" alt="image-20210714190528450"></p><p><strong>简化操作：</strong> 👇👇</p><h4 id="_2-4-1-继承方式" tabindex="-1">2.4.1.继承方式 <a class="header-anchor" href="#_2-4-1-继承方式" aria-label="Permalink to &quot;2.4.1.继承方式&quot;">​</a></h4><p>一样的代码可以通过继承来共享：</p><p>1）定义一个API接口，利用定义方法，并基于SpringMVC注解做声明。</p><p>2）Feign客户端和Controller都集成改接口</p><p><img src="'+I+'" alt="image-20210714190640857"></p><p>优点：</p><ul><li>简单</li><li>实现了代码共享</li></ul><p>缺点：</p><ul><li><p>服务提供方、服务消费方紧耦合</p></li><li><p>参数列表中的注解映射并不会继承，因此Controller中必须再次声明方法、参数列表、注解</p></li></ul><h4 id="_2-4-2-抽取方式" tabindex="-1">2.4.2.抽取方式 <a class="header-anchor" href="#_2-4-2-抽取方式" aria-label="Permalink to &quot;2.4.2.抽取方式&quot;">​</a></h4><p>将Feign的Client抽取为独立模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，提供给所有消费者使用。</p><p>例如，将UserClient、User、Feign的默认配置都抽取到一个feign-api包中，所有微服务引用该依赖包，即可直接使用。</p><p><img src="'+R+'" alt="image-20210714214041796"></p><p><strong>实现基于抽取的最佳实践</strong> 👇</p><h5 id="_1-抽取" tabindex="-1">1）抽取 <a class="header-anchor" href="#_1-抽取" aria-label="Permalink to &quot;1）抽取&quot;">​</a></h5><p>首先创建一个module，命名为feign-api：</p><p><img src="'+U+'" alt="image-20210714204557771"></p><p>项目结构：</p><p><img src="'+D+`" alt="image-20210714204656214"></p><p>在feign-api中然后引入feign的starter依赖</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div><p>然后，order-service中编写的UserClient、User、DefaultFeignConfiguration都复制到feign-api项目中</p><p><img src="`+L+`" alt="image-20210714205221970"></p><h5 id="_2-在order-service中使用feign-api" tabindex="-1">2）在order-service中使用feign-api <a class="header-anchor" href="#_2-在order-service中使用feign-api" aria-label="Permalink to &quot;2）在order-service中使用feign-api&quot;">​</a></h5><p>首先，删除order-service中的UserClient、User、DefaultFeignConfiguration等类或接口。</p><p>在order-service的pom文件中中引入feign-api的依赖：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;cn.itcast.demo&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;feign-api&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;1.0&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div><p>修改order-service中的所有与上述三个组件有关的导包部分，改成导入feign-api中的包</p><h5 id="_3-重启测试" tabindex="-1">3）重启测试 <a class="header-anchor" href="#_3-重启测试" aria-label="Permalink to &quot;3）重启测试&quot;">​</a></h5><p>重启后，发现服务报错了：</p><p><img src="`+B+'" alt="image-20210714205623048"></p><p>这是因为UserClient现在在cn.itcast.feign.clients包下，</p><p>而order-service的@EnableFeignClients注解是在cn.itcast.order包下，不在同一个包，无法扫描到UserClient。</p><h5 id="_4-解决扫描包问题" tabindex="-1">4）解决扫描包问题 <a class="header-anchor" href="#_4-解决扫描包问题" aria-label="Permalink to &quot;4）解决扫描包问题&quot;">​</a></h5><p><strong>方式一：</strong></p><p>指定Feign应该扫描的包：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>@EnableFeignClients(basePackages = &quot;cn.itcast.feign.clients&quot;)</span></span></code></pre></div><p><strong>方式二：</strong></p><p>指定需要加载的Client接口：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>@EnableFeignClients(clients = {UserClient.class})</span></span></code></pre></div><h2 id="_3-gateway服务网关" tabindex="-1">3.Gateway服务网关 <a class="header-anchor" href="#_3-gateway服务网关" aria-label="Permalink to &quot;3.Gateway服务网关&quot;">​</a></h2><h3 id="_3-1-网关简介和入门程序" tabindex="-1">3.1.网关简介和入门程序 <a class="header-anchor" href="#_3-1-网关简介和入门程序" aria-label="Permalink to &quot;3.1.网关简介和入门程序&quot;">​</a></h3><p>网关简介和入门程序</p><p>Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等响应式编程和事件流技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p><p>Gateway网关是我们服务的守门神，所有微服务的统一入口。</p><p>网关的<strong>核心功能特性</strong>：</p><ul><li>请求路由</li><li>权限控制</li><li>限流</li></ul><p>架构图：</p><p><img src="'+G+'" alt="image-20210714210131152"></p><p><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</p><p><strong>路由和负载均衡</strong>：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。</p><p><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</p><p>在SpringCloud中网关的实现包括两种：</p><ul><li>gateway</li><li>zuul</li></ul><p>Zuul是基于Servlet的实现，属于阻塞式编程。而SpringCloudGateway则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能。</p><p>演示下网关的基本路由功能：</p><ol><li>创建SpringBoot工程gateway，引入网关依赖</li><li>编写启动类</li><li>编写基础配置和路由规则</li><li>启动网关服务进行测试</li></ol><h4 id="_1-创建gateway服务-引入依赖" tabindex="-1">1）创建gateway服务，引入依赖 <a class="header-anchor" href="#_1-创建gateway服务-引入依赖" aria-label="Permalink to &quot;1）创建gateway服务，引入依赖&quot;">​</a></h4><p>创建服务：</p><p><img src="'+T+`" alt="image-20210714210919458"></p><p>引入依赖：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>&lt;!--网关--&gt;</span></span>
<span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span>
<span class="line"><span>&lt;!--nacos服务发现依赖--&gt;</span></span>
<span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div><h4 id="_2-编写启动类" tabindex="-1">2）编写启动类 <a class="header-anchor" href="#_2-编写启动类" aria-label="Permalink to &quot;2）编写启动类&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>package cn.itcast.gateway;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.springframework.boot.SpringApplication;</span></span>
<span class="line"><span>import org.springframework.boot.autoconfigure.SpringBootApplication;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@SpringBootApplication</span></span>
<span class="line"><span>public class GatewayApplication {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public static void main(String[] args) {</span></span>
<span class="line"><span>SpringApplication.run(GatewayApplication.class, args);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="_3-编写基础配置和路由规则" tabindex="-1">3）编写基础配置和路由规则 <a class="header-anchor" href="#_3-编写基础配置和路由规则" aria-label="Permalink to &quot;3）编写基础配置和路由规则&quot;">​</a></h4><p>创建application.yml文件，内容如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>server:</span></span>
<span class="line"><span>  port: 10010 # 网关端口</span></span>
<span class="line"><span>spring:</span></span>
<span class="line"><span>  application:</span></span>
<span class="line"><span>    name: gateway # 服务名称</span></span>
<span class="line"><span>  cloud:</span></span>
<span class="line"><span>    nacos:</span></span>
<span class="line"><span>      server-addr: localhost:8848 # nacos地址</span></span>
<span class="line"><span>    gateway:</span></span>
<span class="line"><span>      routes: # 网关路由配置</span></span>
<span class="line"><span>        - id: user-service # 路由id，自定义，只要唯一即可</span></span>
<span class="line"><span>          # uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span></span>
<span class="line"><span>          uri: lb://userservice # 路由的目标地址 lb就是负载均衡，后面跟服务名称</span></span>
<span class="line"><span>          predicates: # 路由断言，也就是判断请求是否符合路由规则的条件</span></span>
<span class="line"><span>            - Path=/user/** # 这个是按照路径匹配，只要以/user/开头就符合要求</span></span></code></pre></div><p>我们将符合<code>Path</code> 规则的一切请求，都代理到 <code>uri</code>参数指定的地址。</p><p>本例中，我们将 <code>/user/**</code>开头的请求，代理到<code>lb://userservice</code>，lb是负载均衡，根据服务名拉取服务列表，实现负载均衡。</p><h4 id="_5-网关路由的流程图" tabindex="-1">5）网关路由的流程图 <a class="header-anchor" href="#_5-网关路由的流程图" aria-label="Permalink to &quot;5）网关路由的流程图&quot;">​</a></h4><p>整个访问的流程如下：</p><p><img src="`+E+'" alt="image-20210714211742956"></p><p>总结</p><p><strong>网关搭建步骤：</strong></p><ol><li>创建项目，引入nacos服务发现和gateway依赖</li><li>配置application.yml，包括服务基本信息、nacos地址、路由</li></ol><p><strong>路由配置包括：</strong></p><ol><li>路由id：路由的唯一标示</li><li>路由目标（uri）：路由的目标地址，http代表固定地址，lb代表根据服务名负载均衡</li><li>路由断言（predicates）：判断路由的规则，</li><li>路由过滤器（filters）：对请求或响应做处理</li></ol><h3 id="_3-2-路由断言工厂" tabindex="-1">3.2.路由断言工厂 <a class="header-anchor" href="#_3-2-路由断言工厂" aria-label="Permalink to &quot;3.2.路由断言工厂&quot;">​</a></h3><p>前言</p><p>我们在配置文件中写的<strong>断言规则只是字符串</strong>，这些字符串会被<code>Predicate Factory</code>读取并处理，<code>转变为路由判断的条件</code></p><p>例如Path=/user/**是按照路径匹配，这个规则是由</p><p><code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来</p><p>处理的，像这样的断言工厂在SpringCloudGateway还有十几个:</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>After</td><td>是某个时间点后的请求</td><td>- After=2037-01-20T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Before</td><td>是某个时间点之前的请求</td><td>- Before=2031-04-13T15:14:47.433+08:00[Asia/Shanghai]</td></tr><tr><td>Between</td><td>是某两个时间点之前的请求</td><td>- Between=2037-01-20T17:42:47.789-07:00[America/Denver], 2037-01-21T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Cookie</td><td>请求必须包含某些cookie</td><td>- Cookie=chocolate, ch.p</td></tr><tr><td>Header</td><td>请求必须包含某些header</td><td>- Header=X-Request-Id, \\d+</td></tr><tr><td>Host</td><td>请求必须是访问某个host（域名）</td><td>- Host=<strong>.somehost.org,</strong>.anotherhost.org</td></tr><tr><td>Method</td><td>请求方式必须是指定方式</td><td>- Method=GET,POST</td></tr><tr><td>Path</td><td>请求路径必须符合指定规则</td><td>- Path=/red/{segment},/blue/**</td></tr><tr><td>Query</td><td>请求参数必须包含指定参数</td><td>- Query=name, Jack或者- Query=name</td></tr><tr><td>RemoteAddr</td><td>请求者的ip必须是指定范围</td><td>- RemoteAddr=192.168.1.1/24</td></tr><tr><td>Weight</td><td>权重处理</td><td></td></tr></tbody></table><p>我们只需要掌握Path这种路由工程就可以了。</p><h3 id="_3-3-过滤器工厂" tabindex="-1">3.3.过滤器工厂 <a class="header-anchor" href="#_3-3-过滤器工厂" aria-label="Permalink to &quot;3.3.过滤器工厂&quot;">​</a></h3><p>过滤器工厂</p><p>GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理：</p><p><img src="'+H+`" alt="image-20210714212312871"></p><h4 id="_3-4-1-路由过滤器的种类" tabindex="-1">3.4.1.路由过滤器的种类 <a class="header-anchor" href="#_3-4-1-路由过滤器的种类" aria-label="Permalink to &quot;3.4.1.路由过滤器的种类&quot;">​</a></h4><p>Spring提供了31种不同的路由过滤器工厂。例如：</p><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>给当前请求添加一个请求头</td></tr><tr><td>RemoveRequestHeader</td><td>移除请求中的一个请求头</td></tr><tr><td>AddResponseHeader</td><td>给响应结果中添加一个响应头</td></tr><tr><td>RemoveResponseHeader</td><td>从响应结果中移除有一个响应头</td></tr><tr><td>RequestRateLimiter</td><td>限制请求的流量</td></tr></tbody></table><h4 id="_3-4-2-请求头过滤器" tabindex="-1">3.4.2.请求头过滤器 <a class="header-anchor" href="#_3-4-2-请求头过滤器" aria-label="Permalink to &quot;3.4.2.请求头过滤器&quot;">​</a></h4><p>下面我们以AddRequestHeader 为例来讲解。</p><blockquote><p><strong>需求</strong>：给所有进入userservice的请求添加一个请求头：Truth=itcast is freaking awesome!</p></blockquote><p>只需要修改gateway服务的application.yml文件，添加路由过滤即可：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>spring:</span></span>
<span class="line"><span>  cloud:</span></span>
<span class="line"><span>    gateway:</span></span>
<span class="line"><span>      routes:</span></span>
<span class="line"><span>      - id: user-service </span></span>
<span class="line"><span>        uri: lb://userservice </span></span>
<span class="line"><span>        predicates: </span></span>
<span class="line"><span>        - Path=/user/** </span></span>
<span class="line"><span>        filters: # 过滤器</span></span>
<span class="line"><span>        - AddRequestHeader=Truth, Itcast is freaking awesome! # 添加请求头</span></span></code></pre></div><p>当前过滤器写在userservice路由下，因此仅仅对访问userservice的请求有效。</p><h4 id="_3-4-3-默认过滤器" tabindex="-1">3.4.3.默认过滤器 <a class="header-anchor" href="#_3-4-3-默认过滤器" aria-label="Permalink to &quot;3.4.3.默认过滤器&quot;">​</a></h4><p>如果要对所有的路由都生效，则可以将过滤器工厂写到default下。格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>spring:</span></span>
<span class="line"><span>  cloud:</span></span>
<span class="line"><span>    gateway:</span></span>
<span class="line"><span>      routes:</span></span>
<span class="line"><span>      - id: user-service </span></span>
<span class="line"><span>        uri: lb://userservice </span></span>
<span class="line"><span>        predicates: </span></span>
<span class="line"><span>        - Path=/user/**</span></span>
<span class="line"><span>      default-filters: # 默认过滤项</span></span>
<span class="line"><span>      - AddRequestHeader=Truth, Itcast is freaking awesome!</span></span></code></pre></div><p>总结</p><ol><li>过滤器的作用是什么？ <ul><li>① 对路由的请求或响应做加工处理，比如添加请求头</li><li>② 配置在路由下的过滤器只对当前路由的请求生效</li></ul></li><li>defaultFilters的作用是什么？ <ul><li>① 对所有路由都生效的过滤器</li></ul></li></ol><h3 id="_3-4-全局过滤器" tabindex="-1">3.4.全局过滤器 <a class="header-anchor" href="#_3-4-全局过滤器" aria-label="Permalink to &quot;3.4.全局过滤器&quot;">​</a></h3><p>前言</p><p>上一节学习的过滤器，网关提供了31种，但每一种过滤器的作用都是固定的。如果我们希望拦截请求，做自己的业务逻辑则没办法实现。</p><h4 id="_3-5-1-全局过滤器作用" tabindex="-1">3.5.1.全局过滤器作用 <a class="header-anchor" href="#_3-5-1-全局过滤器作用" aria-label="Permalink to &quot;3.5.1.全局过滤器作用&quot;">​</a></h4><p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。区别在于GatewayFilter通过配置定义，处理逻辑是固定的；而GlobalFilter的逻辑需要自己写代码实现。</p><p>定义方式是实现GlobalFilter接口。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>public interface GlobalFilter {</span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     *  处理当前请求，有必要的话通过{@link GatewayFilterChain}将请求交给下一个过滤器处理</span></span>
<span class="line"><span>     *</span></span>
<span class="line"><span>     * @param exchange 请求上下文，里面可以获取Request、Response等信息</span></span>
<span class="line"><span>     * @param chain 用来把请求委托给下一个过滤器 </span></span>
<span class="line"><span>     * @return {@code Mono&lt;Void&gt;} 返回标示当前过滤器业务结束</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain);</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>在filter中编写自定义逻辑，可以实现下列功能：</p><ul><li>登录状态判断</li><li>权限校验</li><li>请求限流等</li></ul><h4 id="_3-5-2-自定义全局过滤器" tabindex="-1">3.5.2.自定义全局过滤器 <a class="header-anchor" href="#_3-5-2-自定义全局过滤器" aria-label="Permalink to &quot;3.5.2.自定义全局过滤器&quot;">​</a></h4><p>需求：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：</p><ul><li><p>参数中是否有authorization，</p></li><li><p>authorization参数值是否为admin</p></li></ul><p>如果同时满足则放行，否则拦截</p><p>实现：</p><p>在gateway中定义一个过滤器：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>// 1.获取请求参数</span></span>
<span class="line"><span>// 2.获取authorization参数</span></span>
<span class="line"><span>// 3.校验</span></span>
<span class="line"><span>    // 放行</span></span>
<span class="line"><span>// 4.拦截</span></span>
<span class="line"><span>// 4.1.禁止访问，设置状态码</span></span>
<span class="line"><span>// 4.2.结束处理</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>package cn.itcast.gateway.filters;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import org.springframework.cloud.gateway.filter.GatewayFilterChain;</span></span>
<span class="line"><span>import org.springframework.cloud.gateway.filter.GlobalFilter;</span></span>
<span class="line"><span>import org.springframework.core.annotation.Order;</span></span>
<span class="line"><span>import org.springframework.http.HttpStatus;</span></span>
<span class="line"><span>import org.springframework.stereotype.Component;</span></span>
<span class="line"><span>import org.springframework.web.server.ServerWebExchange;</span></span>
<span class="line"><span>import reactor.core.publisher.Mono;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Order(-1)</span></span>
<span class="line"><span>@Component</span></span>
<span class="line"><span>public class AuthorizeFilter implements GlobalFilter {</span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) {</span></span>
<span class="line"><span>        // 1.获取请求参数</span></span>
<span class="line"><span>        MultiValueMap&lt;String, String&gt; params = exchange.getRequest().getQueryParams();</span></span>
<span class="line"><span>        // 2.获取authorization参数</span></span>
<span class="line"><span>        String auth = params.getFirst(&quot;authorization&quot;);</span></span>
<span class="line"><span>        // 3.校验</span></span>
<span class="line"><span>        if (&quot;admin&quot;.equals(auth)) {</span></span>
<span class="line"><span>            // 放行</span></span>
<span class="line"><span>            return chain.filter(exchange);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        // 4.拦截</span></span>
<span class="line"><span>        // 4.1.禁止访问，设置状态码</span></span>
<span class="line"><span>        exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);</span></span>
<span class="line"><span>        // 4.2.结束处理</span></span>
<span class="line"><span>        return exchange.getResponse().setComplete();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="_3-5-3-过滤器执行顺序" tabindex="-1">3.5.3.过滤器执行顺序 <a class="header-anchor" href="#_3-5-3-过滤器执行顺序" aria-label="Permalink to &quot;3.5.3.过滤器执行顺序&quot;">​</a></h4><p>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter</p><p>请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器：</p><p><img src="`+N+'" alt="image-20210714214228409"></p><p>排序的规则是什么呢？</p><ul><li>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高，执行顺序越靠前</strong>。</li><li>GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定</li><li>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增。</li><li>当过滤器的order值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行。</li></ul><p>详细内容，可以查看源码：</p><p><code>org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator#getFilters()</code>方法是先加载defaultFilters，然后再加载某个route的filters，然后合并。</p><p><code>org.springframework.cloud.gateway.handler.FilteringWebHandler#handle()</code>方法会加载全局过滤器，与前面的过滤器合并后根据order排序，组织过滤器链</p><h3 id="_3-5-跨域问题" tabindex="-1">3.5.跨域问题 <a class="header-anchor" href="#_3-5-跨域问题" aria-label="Permalink to &quot;3.5.跨域问题&quot;">​</a></h3><p>跨域问题</p><p><strong>代码操作</strong></p><h4 id="_3-6-2-模拟跨域问题" tabindex="-1">3.6.2.模拟跨域问题 <a class="header-anchor" href="#_3-6-2-模拟跨域问题" aria-label="Permalink to &quot;3.6.2.模拟跨域问题&quot;">​</a></h4><p>找到课前资料的页面文件：</p><p><img src="'+O+'" alt="image-20210714215713563"></p><p>放入tomcat或者nginx这样的web服务器中，启动并访问。</p><p>可以在浏览器控制台看到下面的错误：</p><p><img src="'+M+`" alt="image-20210714215832675"></p><p>从localhost:8090访问localhost:10010，端口不同，显然是跨域的请求。</p><h4 id="_3-6-3-解决跨域问题" tabindex="-1">3.6.3.解决跨域问题 <a class="header-anchor" href="#_3-6-3-解决跨域问题" aria-label="Permalink to &quot;3.6.3.解决跨域问题&quot;">​</a></h4><p>在gateway服务的application.yml文件中，添加下面的配置：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>spring:</span></span>
<span class="line"><span>  cloud:</span></span>
<span class="line"><span>    gateway:</span></span>
<span class="line"><span>      # 。。。</span></span>
<span class="line"><span>      globalcors: # 全局的跨域处理</span></span>
<span class="line"><span>        add-to-simple-url-handler-mapping: true # 解决options请求被拦截问题</span></span>
<span class="line"><span>        corsConfigurations:</span></span>
<span class="line"><span>          &#39;[/**]&#39;:</span></span>
<span class="line"><span>            allowedOrigins: # 允许哪些网站的跨域请求 </span></span>
<span class="line"><span>              - &quot;http://localhost:8090&quot;</span></span>
<span class="line"><span>            allowedMethods: # 允许的跨域ajax的请求方式</span></span>
<span class="line"><span>              - &quot;GET&quot;</span></span>
<span class="line"><span>              - &quot;POST&quot;</span></span>
<span class="line"><span>              - &quot;DELETE&quot;</span></span>
<span class="line"><span>              - &quot;PUT&quot;</span></span>
<span class="line"><span>              - &quot;OPTIONS&quot;</span></span>
<span class="line"><span>            allowedHeaders: &quot;*&quot; # 允许在请求中携带的头信息</span></span>
<span class="line"><span>            allowCredentials: true # 是否允许携带cookie</span></span>
<span class="line"><span>            maxAge: 360000 # 这次跨域检测的有效期</span></span></code></pre></div>`,302),z=[j];function J(W,Y,$,K,X,Z){return n(),s("div",null,z)}const sa=a(V,[["render",J]]);export{aa as __pageData,sa as default};
