import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.-JfgED0h.js";const c=JSON.parse('{"title":"LeetCode 203. 移除链表元素","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/linked-list/203.移除链表元素.md","filePath":"algorithm/linked-list/203.移除链表元素.md"}'),n={name:"algorithm/linked-list/203.移除链表元素.md"},h=t(`<h1 id="leetcode-203-移除链表元素" tabindex="-1">LeetCode 203. 移除链表元素 <a class="header-anchor" href="#leetcode-203-移除链表元素" aria-label="Permalink to &quot;LeetCode 203. 移除链表元素&quot;">​</a></h1><h2 id="题目描述" tabindex="-1">题目描述 <a class="header-anchor" href="#题目描述" aria-label="Permalink to &quot;题目描述&quot;">​</a></h2><p>删除链表中等于给定值 val 的所有节点。</p><p>示例:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F6F6F4;">输入</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 6</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#F6F6F4;">输出</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">5</span></span></code></pre></div><h2 id="解题思路" tabindex="-1">解题思路 <a class="header-anchor" href="#解题思路" aria-label="Permalink to &quot;解题思路&quot;">​</a></h2><p>创建一个新链表，遇到相同值的情况，将当前节点的 next 指向下一个节点的 next，否则继续遍历。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> removeElements</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> dummyHead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> ListNode</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 哑结点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  dummyHead.next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> head;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> dummyHead;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (p.next) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (p.next.val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> val) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">      p.next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> p.next.next;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">      p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> p.next;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> dummyHead.next;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">};</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">学如逆水行舟，不进则退</span></span></code></pre></div>`,9),l=[h];function k(p,e,d,r,F,g){return a(),i("div",null,l)}const o=s(n,[["render",k]]);export{c as __pageData,o as default};
