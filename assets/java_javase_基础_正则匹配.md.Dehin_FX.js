import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.-JfgED0h.js";const o=JSON.parse('{"title":"正则匹配","description":"","frontmatter":{},"headers":[],"relativePath":"java/javase/基础/正则匹配.md","filePath":"java/javase/基础/正则匹配.md"}'),h={name:"java/javase/基础/正则匹配.md"},n=t(`<h1 id="正则匹配" tabindex="-1">正则匹配 <a class="header-anchor" href="#正则匹配" aria-label="Permalink to &quot;正则匹配&quot;">​</a></h1><h2 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h2><p>java.util.regex 包主要包括以下三个类：</p><ul><li><strong>Pattern 类</strong></li></ul><p>正则表达式的编译表示。没有公共构造方法，必须首先调用其公共静态编译方法获得 Pattern 对象。</p><ul><li><strong>Matcher 类</strong></li></ul><p>对输入字符串进行解释和匹配操作的引擎。没有公共构造方法，需要调用 Pattern 对象的 matcher 方法获得 Matcher 对象。</p><ul><li><strong>PatternSyntaxException 类</strong></li></ul><p>非强制异常类，表示正则表达式模式中的语法错误。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> java.util.regex.Matcher;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> java.util.regex.Pattern;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> RegexMatches</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">( </span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">[] ) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> Pattern.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">abc</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);        </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 编译正则表达式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Matcher</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> matcher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">matcher</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">abcdefg</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);    </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 放入字符串中匹配</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(matcher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">lookingAt</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">());   </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 是否存在子串匹配 true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(matcher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">matches</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">());     </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 是否完全匹配 false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><h2 id="正则表达式" tabindex="-1">正则表达式 <a class="header-anchor" href="#正则表达式" aria-label="Permalink to &quot;正则表达式&quot;">​</a></h2><p>我们可以通过使用特殊符号，让一个正则表达式能够匹配多种符合要求的字符串。</p><h3 id="表意符号" tabindex="-1">表意符号 <a class="header-anchor" href="#表意符号" aria-label="Permalink to &quot;表意符号&quot;">​</a></h3><ul><li><code>.</code> 表示任意字符</li></ul><p>在 Java 中，正则表达式编译需要再经过一次转义。因此 <code>\\\\</code> 才表示插入一个正则表达式的反斜线！</p><ul><li><code>\\\\d</code> 表示一位数字</li><li><code>\\\\\\\\</code> 表示一个反斜杠</li></ul><h3 id="字符集" tabindex="-1">字符集 <a class="header-anchor" href="#字符集" aria-label="Permalink to &quot;字符集&quot;">​</a></h3><ul><li><code>x|y</code> 匹配 x 或 y</li><li><code>[abc]</code> 匹配括号中任意单个字符</li><li><code>[^abc]</code> 匹配除括号中的任意单个字符</li><li><code>[a-zA-Z]</code> 匹配任意单个字母</li><li><code>[a-z&amp;&amp;[^def]]</code> 除 def 外的任意单个字母</li></ul><h3 id="字符串匹配" tabindex="-1">字符串匹配 <a class="header-anchor" href="#字符串匹配" aria-label="Permalink to &quot;字符串匹配&quot;">​</a></h3><p><strong>通过 <code>?</code>、<code>*</code>、<code>+</code> 符号，我们可以对指定类型的字符串进行匹配。</strong></p><p><strong>贪婪模式|饥饿模式|独占模式| 结果</strong><strong>-|-|-|-</strong><strong>X?|X??|X?+|匹配0或1次</strong><em><em>X</em>|X</em>?|X*+|匹配0次或多次** <strong>X+|X+?|X++|匹配1次或多次</strong><strong>X{n}|X{n}?|X{n}+|匹配n次</strong><strong>X{m,n}|X{m,n}?|X{m,n}+| 匹配m-n次</strong></p><p>在匹配字符串时，同一个正则表达式可能会在在字符串中匹配到多种结果。Java 提供了以下三种方式供开发者选择：</p><ul><li><strong>贪婪模式</strong> （默认）尽可能匹配长字符串。</li><li><strong>饥饿模式</strong> （?）尽可能匹配短字符串。</li><li><strong>独占模式</strong> （+）尽可能匹配长字符串，不成功会结束匹配而不回溯。</li></ul><hr><h2 id="捕获组" tabindex="-1">捕获组 <a class="header-anchor" href="#捕获组" aria-label="Permalink to &quot;捕获组&quot;">​</a></h2><h3 id="普通捕获组" tabindex="-1">普通捕获组 <a class="header-anchor" href="#普通捕获组" aria-label="Permalink to &quot;普通捕获组&quot;">​</a></h3><p>我们可以在正则表达式中同时捕获多个结果，最终以 group 的形式呈现。</p><ul><li>matcher.group(0) 完全匹配整个正则表达式。</li><li>matcher.group(1-n) 从左到右分别记录正则表达式中 n 个括号内的结果。</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> RegexMatches</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">( </span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">[] ) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#F286C4;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">d{4})-((</span><span style="--shiki-light:#005CC5;--shiki-dark:#F286C4;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">d{2})-(</span><span style="--shiki-light:#005CC5;--shiki-dark:#F286C4;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">d{2}))</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">     </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> Pattern.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(regex);                </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 编译正则表达式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Matcher</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> matcher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">matcher</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">2020-10-25</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);         </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 放入字符串</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        matcher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();                      </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 执行匹配</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(matcher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">group</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 2020-10-25</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(matcher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">group</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 2020</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(matcher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">group</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 10-25</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(matcher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">group</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(matcher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">group</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 25</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><h3 id="命名捕获组" tabindex="-1">命名捕获组 <a class="header-anchor" href="#命名捕获组" aria-label="Permalink to &quot;命名捕获组&quot;">​</a></h3><p>我们可以通过 <code>(?&lt;Name&gt;Expression)</code> 对括号内容就行命名，并通过名称获取括号内的匹配结果。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> RegexMatches</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">( </span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">String</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> args</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">[] ) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">(?&lt;year&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F286C4;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">d{4})-(?&lt;md&gt;(?&lt;month&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F286C4;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">d{2})-(?&lt;date&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#F286C4;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">d{2}))</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> Pattern.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(regex);                 </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 编译正则表达式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        Matcher</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> matcher </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">matcher</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">2020-10-25</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);          </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 放入字符串中匹配</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        matcher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();                            </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 执行匹配</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(matcher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">group</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">year</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">));  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 2020</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(matcher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">group</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">md</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">));    </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 10-25</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(matcher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">group</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">month</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(matcher.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">group</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">date</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">));  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 25</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><h3 id="非捕获组" tabindex="-1">非捕获组 <a class="header-anchor" href="#非捕获组" aria-label="Permalink to &quot;非捕获组&quot;">​</a></h3><p>我们可以通过 <code>(?:Expression)</code> 对组不进行捕获。</p><ul><li><code>(?=pattern)</code></li></ul><p>例如，&#39;Windows (?=95|98|NT|2000)&#39; 匹配&quot;Windows 2000&quot;中的&quot;Windows&quot;，但不匹配&quot;Windows 3.1&quot;中的&quot;Windows&quot;。</p><p>预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</p><ul><li><code>(?!pattern)</code></li></ul><p><strong>如 &#39;Windows (?!95|98|NT|2000)&#39; 匹配&quot;Windows 3.1&quot;中的 &quot;Windows&quot;，但不匹配&quot;Windows 2000&quot;中的&quot;Windows&quot;。</strong></p><p>预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。</p><h2 id="字符串替换" tabindex="-1">字符串替换 <a class="header-anchor" href="#字符串替换" aria-label="Permalink to &quot;字符串替换&quot;">​</a></h2>`,41),l=[n];function k(p,e,r,F,d,g){return a(),i("div",null,l)}const E=s(h,[["render",k]]);export{o as __pageData,E as default};
