import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.-JfgED0h.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/vue/Vue.js设计与实现-阅读笔记.md","filePath":"frontend/vue/Vue.js设计与实现-阅读笔记.md"}'),t={name:"frontend/vue/Vue.js设计与实现-阅读笔记.md"},h=n(`<h2 id="_4-响应系统的作用与实现" tabindex="-1">4. 响应系统的作用与实现 <a class="header-anchor" href="#_4-响应系统的作用与实现" aria-label="Permalink to &quot;4.	响应系统的作用与实现&quot;">​</a></h2><h3 id="_4-1响应式数据与副作用函数" tabindex="-1">4.1 响应式数据与副作用函数 <a class="header-anchor" href="#_4-1响应式数据与副作用函数" aria-label="Permalink to &quot;4.1	响应式数据与副作用函数&quot;">​</a></h3><h4 id="什么是副作用函数" tabindex="-1">什么是副作用函数 <a class="header-anchor" href="#什么是副作用函数" aria-label="Permalink to &quot;什么是副作用函数&quot;">​</a></h4><p>函数的执行会<strong>直接或间接影响其他函数的执行</strong>，这时我们说函数产生了副作用。比如修改了全局变量</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 全局变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> effect</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">   val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 2</span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> // 修改全局变量，产生副作用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><h3 id="_4-2-响应式数据的基本实现" tabindex="-1">4.2　响应式数据的基本实现 <a class="header-anchor" href="#_4-2-响应式数据的基本实现" aria-label="Permalink to &quot;4.2　响应式数据的基本实现&quot;">​</a></h3><p>现在我们有个effect函数，我们希望<code>obj.text</code>改变的时候，会自动重新运行<code>effect</code>函数，达到响应式数据更新的目标</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 原始数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> { text</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">hello world</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> effect</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  document.body.innerText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> data.text</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p><strong>现在的两个重点操作就是</strong></p><ol><li>在<strong>读取</strong> <code>data.text</code>的值的时候，把<code>effect</code>函数收集起来放在一个桶里面</li><li>在<strong>设置</strong> <code>data.text</code>的值的时候，<strong>即值被重新赋值了</strong>，执行桶里面的<code>effect</code>函数</li></ol><p>转换成代码就是</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 存储副作用函数的桶</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> bucket</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 对原始数据的代理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(data, {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 拦截读取操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 将副作用函数 effect 添加到存储副作用函数的桶中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    bucket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(effect)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 返回属性值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> target[key]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 拦截设置操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">newVal</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 设置属性值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    target[key] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> newVal</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 把副作用函数从桶里取出并执行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    bucket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">})</span></span></code></pre></div><h3 id="_4-3-设计一个完善的响应系统" tabindex="-1">4.3　设计一个完善的响应系统 <a class="header-anchor" href="#_4-3-设计一个完善的响应系统" aria-label="Permalink to &quot;4.3　设计一个完善的响应系统&quot;">​</a></h3><p>从上面不难看出，目前有很多缺陷</p><ol><li><p>代理中的<code>get</code>，硬编码取了全局的<code>effect</code>函数，不够灵活</p><p>改造一下<code>effect</code>函数，新增一个参数接收副作用函数，新建一个全局变量<code>activeEffect</code>来记录当前活动的副作用函数</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 用一个全局变量存储当前激活的 effect 函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> activeEffect</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> effect</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 当调用 effect 注册副作用函数时，将副作用函数复制给 activeEffect</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  activeEffect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> fn</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 执行副作用函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">  fn</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div></li><li><p>副作用函数没有和具体的<code>key</code>所关联，只要改变了<code>obj</code>的任意一个<code>key</code>，都会触发副作用函数的执行</p><blockquote><p>假设原始对象为<code>target</code>，<code>target</code>对象有多个<code>key</code>，然后每一个<code>key</code>对应有副作用函数<code>effect</code></p></blockquote><ul><li><p>先把<code>bucket</code>的类型更改为<code>WeakMap</code>，以<code>target</code>作为<code>WeakMap</code>的<code>key</code>，而他的<code>value</code>是一个<code>map</code>结构</p><blockquote><p>使用<code>WeakMap</code>，因为利于垃圾回收，<code>WeakMap</code>对于<code>key</code>的引用是弱引用，当<code>target</code>不存在时候，就会进行垃圾回收</p></blockquote></li><li><p>上面的<code>Map</code>结构我们命名为<code>depsMap</code>，他的<code>key</code>是原始对象<code>target</code>的属性，而他的<code>value</code>就是和这个<code>key</code>所关联的副作用函数集合**(<code>Set</code>结构，目的是去重)**，命名为<code>deps</code></p></li></ul><p><img src="https://raw.githubusercontent.com/GauharChan/Picture-bed/main/img/image-20230131170927023.png" alt="image-20230131170927023"></p><ol start="3"><li>为了优化代码，应该封装两个函数<code>track</code> 和<code>trigger</code>。在<code>get</code>中追踪<code>(track)</code>依赖；在<code>set</code>中触发<code>(trigger)</code>依赖</li></ol><p>代码如下</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 原始数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> { text</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">hello world</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 对原始数据的代理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(data, {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 拦截读取操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">  get</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 将副作用函数 activeEffect 添加到存储副作用函数的桶中</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">    track</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target, key)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 返回属性值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> target[key]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 拦截设置操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">newVal</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 设置属性值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    target[key] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> newVal</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 把副作用函数从桶里取出并执行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">    trigger</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target, key)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> track</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> depsMap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> bucket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">depsMap) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    bucket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target, (depsMap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> deps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> depsMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(key)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">deps) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    depsMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(key, (deps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  deps.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(activeEffect)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> trigger</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> depsMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> bucket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">depsMap) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">return</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> effects</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> depsMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(key)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  effects </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> effects.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">fn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 用一个全局变量存储当前激活的 effect 函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> activeEffect</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> effect</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 当调用 effect 注册副作用函数时，将副作用函数复制给 activeEffect</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  activeEffect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> fn</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 执行副作用函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">  fn</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">effect</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">effect run</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  document.body.innerText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> obj.text</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">})</span></span></code></pre></div></li></ol><h3 id="_4-4-分支切换与-cleanup" tabindex="-1">4.4　分支切换与 cleanup <a class="header-anchor" href="#_4-4-分支切换与-cleanup" aria-label="Permalink to &quot;4.4　分支切换与 cleanup&quot;">​</a></h3><p>所谓分支切换，是指有条件影响哪部分代码的执行，比如一个三元表达式</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">effect</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">effect run</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  document.body.innerText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> obj.ok </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> obj.text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">not</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">})</span></span></code></pre></div><p>可以看到，副作用函数 分别被字段 data.ok 和字段 data.text 所对应的依赖集合收集。</p><p>但当字段 obj.ok 的值修改为 false，并触发副作用函数重新执行后，不应该被字段 obj.text 所对应的依赖集合收集</p><p>目前我们没有做到这一点，解决方案也很简单：<strong>每次副作用函数执行时，我们可以先把它从所有与之关联的依赖集合中删除</strong></p><h4 id="cleanup" tabindex="-1">cleanup <a class="header-anchor" href="#cleanup" aria-label="Permalink to &quot;cleanup&quot;">​</a></h4><ol><li><p>副作用函数要明确知道哪些依赖集合关联到它</p><p>重构一下<code>effect</code>函数，新建<code>effectFn</code>函数来做之前的事情，在<code>effectFn</code>函数上新增一个数组，来储存<strong>当前副作用函数的</strong>依赖集合<code>deps</code></p><blockquote><p>因为函数本质上也是一个对象</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> effect</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> effectFn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 当调用 effect 注册副作用函数时，将副作用函数复制给 activeEffect</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    activeEffect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> effectFn</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">    fn</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // activeEffect.deps 用来存储所有与该副作用函数相关的依赖集合</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  effectFn.deps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> []</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 执行副作用函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">  effectFn</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div></li><li><p>上面只是初始化了数组，具体要在<code>track</code>的时候收集</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> track</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> depsMap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> bucket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">depsMap) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    bucket.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target, (depsMap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> deps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> depsMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(key)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">deps) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    depsMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(key, (deps </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  }</span></span>
<span class="line highlighted"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 当前key所关联的副作用函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  deps.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(activeEffect)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 收集当前副作用函数关联的依赖集合  </span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  activeEffect.deps.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(deps)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div></li></ol>`,23),k=[h];function l(p,e,F,d,r,g){return a(),i("div",null,k)}const o=s(t,[["render",l]]);export{y as __pageData,o as default};
