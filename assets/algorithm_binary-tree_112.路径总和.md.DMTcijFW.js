import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.-JfgED0h.js";const o=JSON.parse('{"title":"LeetCode 112. 路径总和","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/binary-tree/112.路径总和.md","filePath":"algorithm/binary-tree/112.路径总和.md"}'),h={name:"algorithm/binary-tree/112.路径总和.md"},t=n(`<h1 id="leetcode-112-路径总和" tabindex="-1">LeetCode 112. 路径总和 <a class="header-anchor" href="#leetcode-112-路径总和" aria-label="Permalink to &quot;LeetCode 112. 路径总和&quot;">​</a></h1><h2 id="题目描述" tabindex="-1">题目描述 <a class="header-anchor" href="#题目描述" aria-label="Permalink to &quot;题目描述&quot;">​</a></h2><p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p><p>说明: 叶子节点是指没有子节点的节点。</p><p>示例:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">给定如下二叉树，以及目标和 sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 22</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">，</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">              5</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">             /</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">            4</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">   8</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#EE6666;">           /</span><span style="--shiki-light:#032F62;--shiki-dark:#EE6666;">   /</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">          11</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">  13</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">  4</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">         /</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  \\      \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">        7</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">    2</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">      1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">返回 </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, 因为存在目标和为 </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> 的根节点到叶子节点的路径 </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">11</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">。</span></span></code></pre></div><p>来源：力扣（LeetCode） 链接：<a href="https://leetcode-cn.com/problems/path-sum" target="_blank" rel="noreferrer">https://leetcode-cn.com/problems/path-sum</a> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路" tabindex="-1">解题思路 <a class="header-anchor" href="#解题思路" aria-label="Permalink to &quot;解题思路&quot;">​</a></h2><p><code>dfs</code>，对于非叶子节点，我们直接减去相应权值，到达了叶子节点，我们判断一下即可，如果满足条件，返回 <code>true</code>。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> * Definition for a binary tree node.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> * function TreeNode(val) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> *     this.val = val;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> *     this.left = this.right = null;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> * }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> */</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> {TreeNode}</span><span style="--shiki-light:#24292E;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> root</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">@param</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> {number}</span><span style="--shiki-light:#24292E;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> sum</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">@return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> {boolean}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> hasPathSum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">root) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> dfs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 非叶子节点，就减去权值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">-=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> root.val;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 到达叶子节点，进行判断</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">root.left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">root.right) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 先遍历左子树，再遍历右子树</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    root.left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> dfs</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(sum, root.left);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    root.right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> dfs</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(sum, root.right);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  };</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">  dfs</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(sum, root);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> res;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">};</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">学如逆水行舟，不进则退</span></span></code></pre></div>`,11),l=[t];function k(p,e,r,F,d,g){return a(),i("div",null,l)}const c=s(h,[["render",k]]);export{o as __pageData,c as default};
