import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.K9vKjHgL.js";const n="/docs/assets/cors-1.nCfKp-wg.png",e="/docs/assets/cors-3.DJToC2k5.png",p="/docs/assets/cors-4.DWRiK_bJ.png",l="/docs/assets/cors-5.CsHpLssR.png",h="/docs/assets/cors-6.YdEEqPXw.png",r="/docs/assets/cors-7.B1F5znIm.png",k="/docs/assets/cors-8.CGVweWAy.png",o="/docs/assets/cors-9.Cp-V3NQ3.png",d="/docs/assets/cors-10.CFYLEWZi.png",c="/docs/assets/jwt-10.BztPRLnL.png",A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"backend/tobetter/springboot/cors.md","filePath":"backend/tobetter/springboot/cors.md"}'),g={name:"backend/tobetter/springboot/cors.md"},F=t('<h2 id="前后端分离项目-如何解决跨域问题" tabindex="-1">前后端分离项目，如何解决跨域问题？ <a class="header-anchor" href="#前后端分离项目-如何解决跨域问题" aria-label="Permalink to &quot;前后端分离项目，如何解决跨域问题？&quot;">​</a></h2><p>跨域问题是前后端分离项目中非常常见的一个问题，举例来说，编程猫（<a href="https://github.com/itwanger/coding-more" target="_blank" rel="noreferrer">codingmore</a>）学习网站的前端服务跑在 8080 端口下，后端服务跑在 9002 端口下，那么前端在请求后端接口的时候就会出现跨域问题。</p><img src="'+n+`"><p>403 Forbidden 是HTTP协议中的一个状态码（Status Code），意味着后端服务虽然成功解析了请求，但前端却没有访问该资源的权限。</p><p>那怎么解决这个问题呢？通常有两个思路：</p><ul><li>前端使用 Nodejs 代理（开发环境下，生产环境下可以用 Nginx 替代）</li><li>或者后端开启跨域资源共享</li></ul><h3 id="一、关于跨域" tabindex="-1">一、关于跨域 <a class="header-anchor" href="#一、关于跨域" aria-label="Permalink to &quot;一、关于跨域&quot;">​</a></h3><p>跨域对于前后端开发者来说，就像一块狗皮膏药，无论是面试还是开发中，都会经常遇到。</p><p>之所以出现跨域问题，是因为<a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="noreferrer">浏览器的同源策略</a>，为了隔离潜在的恶意文件，为了防御来自歪门邪道的攻击，浏览器限制了从同一个源加载的文档或脚本与来自另一个源的资源进行交互。</p><p>前面我们提到了，前端跑在 8080 端口下，后端跑在 9002 端口下，这种情况就属于不同的源（域名不同，协议不同，端口不同），所以 8080 端口下的前端请求直接访问 9002 端口下的后端接口时就访问失败了。</p><p>那正确的打开方式是什么呢？我们前面也提到了，前端使用 Nodejs 代理或者后端开启跨域资源共享，我们一一来实践下。</p><p>&lt;img src=&quot;./images/cors-2.gif)</p><h3 id="二、nodejs-代理" tabindex="-1">二、Nodejs 代理 <a class="header-anchor" href="#二、nodejs-代理" aria-label="Permalink to &quot;二、Nodejs 代理&quot;">​</a></h3><p>在 Nodejs 出现之前，JavaScript 编写的程序通常需要在用户的浏览器上执行，Node.js 出现后，JavaScript 也能用于服务端编程了。Nodejs 一系列的内置模块使得程序可以脱离 IIS、Apache 这种 Web 服务作为独立的服务器执行。</p><p>我们使用 Nodejs 来解决跨域问题的思路就是，在本地创建一个虚拟服务器，对 8080 端口下的前端请求进行代理，同时接收 9002 端口下的服务器端响应，这样服务端和服务端进行数据的交互就不会出现跨域问题了。</p><p>第一步，配置 Nodejs 代理服务</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>module.exports = {</span></span>
<span class="line"><span>  dev: {</span></span>
<span class="line"><span>    // Paths</span></span>
<span class="line"><span>    assetsSubDirectory: &#39;static&#39;,</span></span>
<span class="line"><span>    assetsPublicPath: &#39;/&#39;,</span></span>
<span class="line"><span>    proxyTable: {</span></span>
<span class="line"><span>      &#39;/api&#39;: {</span></span>
<span class="line"><span>        target: &#39;http://localhost:9002&#39;, // 你请求的第三方接口</span></span>
<span class="line"><span>        changeOrigin: false, // 在本地会创建一个虚拟服务端，然后发送请求的数据，并同时接收请求的数据，这样服务端和服务端进行数据的交互就不会有跨域问题</span></span>
<span class="line"><span>        pathRewrite: { // 路径重写，</span></span>
<span class="line"><span>          &#39;^/api&#39;: &#39;&#39; // 替换target中的请求地址，也就是说以后你在请求http://api.codingmore.top/v2/XXXXX这个地址的时候直接写成/api即可。</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>      },</span></span>
<span class="line"><span>    },</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>第二步，配置前端访问请求路径</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>module.exports = merge(prodEnv, {</span></span>
<span class="line"><span>  NODE_ENV: &#39;&quot;development&quot;&#39;,</span></span>
<span class="line"><span>  VUE_APP_BASE_API: &#39;&quot;/api&quot;&#39;</span></span>
<span class="line"><span>  // VUE_APP_BASE_API: &#39;&quot;http://localhost:9002&quot;&#39;</span></span>
<span class="line"><span>})</span></span></code></pre></div><p>第三步，重启前端服务</p><img src="`+e+'"><p>再次点击「登录」按钮，可以看到请求的 URL 发生了改变，原来是 <code>http://localhost:9002/users/login</code>，现在是 <code>http://localhost:8080/api/users/login</code>。与此同时，可以看到多了一个 Remote Address，端口也是 8080，也就是说经过 Nodejs 的代理，前后端的交互在同一个源下面了，这样就不会发生跨域问题了。</p><p>同时，可以看得到，服务器端返回的状态码变成了 200，表示请求成功。</p><img src="'+p+`"><h3 id="三、开启跨域资源共享" tabindex="-1">三、开启跨域资源共享 <a class="header-anchor" href="#三、开启跨域资源共享" aria-label="Permalink to &quot;三、开启跨域资源共享&quot;">​</a></h3><p>跨域资源共享，也就是 Cross-Origin Resource Sharing，简拼为 CORS，是一种基于 HTTP 头信息的机制，通过允许服务器标识除了它自己以外的资源，从而实现跨域访问。</p><p>第一步，开启 CORS 支持</p><p>在 Spring Boot 应用中，加入 CORS 的支持简单到不忍直视，添加一个配置类就可以了。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> GlobalCorsConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> CorsFilter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> corsFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        CorsConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> CorsConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 设置你要允许的网站域名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        config.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">addAllowedOrigin</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">http://localhost:8080</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        //允许跨域发送cookie</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        config.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">setAllowCredentials</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        //放行全部原始头信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        config.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">addAllowedHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        //允许所有请求方法跨域调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        config.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">addAllowedMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        UrlBasedCorsConfigurationSource</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> source </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> UrlBasedCorsConfigurationSource</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        source.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">registerCorsConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">/**</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, config);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> CorsFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(source);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p>第二步，重启后端服务，再次点击登录按钮，发现请求已经可以正常访问了。</p><img src="`+l+`"><p>本例中，后端返回 <code>Access-Control-Allow-Origin: http://localhost:8080</code> 就表示，跑在 9002 端口下的后端接口可以被 8080 端口的前端请求访问。</p><p>如果允许所有域名进行跨域调用的话，只需改变一行代码即可。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//允许所有域名进行跨域调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">config.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">addAllowedOriginPattern</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 设置你要允许的网站域名</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">//        config.addAllowedOrigin(&quot;http://localhost:8080&quot;);</span></span></code></pre></div><p>对于 login 这种简单的请求来说，它们是不会触发 CORS 预检的，因此不需要在服务器端增加其他配置就可以了。那什么是简单请求呢？</p><p>1）请求方法是以下三种方法之一：</p><ul><li>HEAD</li><li>GET</li><li>POST</li></ul><p>2）HTTP 的头信息不超出以下几种字段：</p><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type：只限于三个值 <code>application/x-www-form-urlencoded、multipart/form-data、text/plain</code></li></ul><p>那对于会触发 CORS 预检的非简单请求（比如说请求方法是 PUT 或 DELETE，或者 Content-Type 字段的类型是 <code>application/json</code>，或者请求消息头包含了一些自定义的字段），该怎么办呢？</p><p>非简单请求在正式通信之前，会增加一次 HTTP 查询请求，称为“预检”请求。预检请求通过后，才会返回正常的响应内容。</p><img src="`+h+'"><p>拿编程猫的文章管理页来举例，该页面会向后端发起一个 <code>posts/queryPageable</code> 的分页查询，该请求包含了一个自定义的消息头 Authorization，于是浏览器认为该请求是一个非简单请求，然后就会自动发起一次 OPTIONS 请求，但由于我们的 Spring Boot 项目整合了 SpringsScurity 安全管理框架，没有对OPTIONS请求放开登录认证，导致验证失败，文章分页请求的响应数据就没有返回回来。</p><img src="'+r+`"><p>第三步，通过以下代码给 OPTIONS 请求放行。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> SecurityConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> WebSecurityConfigurerAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> configure</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">HttpSecurity</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> httpSecurity</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        ExpressionUrlAuthorizationConfigurer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">HttpSecurity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">.ExpressionInterceptUrlRegistry registry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> httpSecurity</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">authorizeRequests</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        //允许跨域请求的OPTIONS请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        registry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">antMatchers</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(HttpMethod.OPTIONS)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">permitAll</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p>再次重启后端服务，重新访问文章列表接口，发现有响应数据了。</p><img src="`+k+'"><p>非简单请求必须首先使用 OPTIONS 请求方法发起一个预检请求到服务器端，以获知服务器是否允许该实际请求。&quot;预检请求“的使用，避免了跨域请求对服务器的用户数据造成未预期的影响。</p><p>我们来通过两张图片简单总结一下预检请求的整个过程，第一张，发起 OPTIONS 预检请求：</p><img src="'+o+'"><p>第二章，发起正式请求：</p><img src="'+d+'"><h3 id="四、源码路径" tabindex="-1">四、源码路径 <a class="header-anchor" href="#四、源码路径" aria-label="Permalink to &quot;四、源码路径&quot;">​</a></h3><p>编程猫后端源码：</p><blockquote><p><a href="https://github.com/itwanger/coding-more" target="_blank" rel="noreferrer">https://github.com/itwanger/coding-more</a></p></blockquote><p>编程猫后台管理的前端源码：</p><blockquote><p><a href="https://github.com/itwanger/codingmore-admin-web" target="_blank" rel="noreferrer">https://github.com/itwanger/codingmore-admin-web</a></p></blockquote><p>参考链接：</p><blockquote><p>跨域：<a href="https://segmentfault.com/a/1190000015597029" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000015597029</a> CORS：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS</a> 阮一峰：<a href="https://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noreferrer">https://www.ruanyifeng.com/blog/2016/04/cors.html</a> 简单请求+预检请求：<a href="https://github.com/amandakelake/blog/issues/62" target="_blank" rel="noreferrer">https://github.com/amandakelake/blog/issues/62</a></p></blockquote><hr><p><strong>本篇已收录至 GitHub 上星标 1.6k+ star 的开源专栏《Java程序员进阶之路》，据说每一个优秀的 Java 程序员都喜欢她，风趣幽默、通俗易懂。内容包括 Java 基础、Java 并发编程、Java 虚拟机、Java 企业级开发、Java 面试等核心知识点。学 Java，就认准 Java程序员进阶之路</strong>😄。</p><p><a href="https://github.com/itwanger/toBeBetterJavaer" target="_blank" rel="noreferrer">https://github.com/itwanger/toBeBetterJavaer</a></p><p>star 了这个仓库就等于你拥有了成为了一名优秀 Java 工程师的潜力。也可以戳下面的链接跳转到《Java程序员进阶之路》的官网网址，开始愉快的学习之旅吧。</p><p><a href="https://tobebetterjavaer.com/" target="_blank" rel="noreferrer">https://tobebetterjavaer.com/</a></p><img src="'+c+'"><p><em>没有什么使我停留——除了目的，纵然岸旁有玫瑰、有绿荫、有宁静的港湾，我是不系之舟</em>。</p>',67),y=[F];function E(u,f,m,C,b,_){return a(),i("div",null,y)}const D=s(g,[["render",E]]);export{A as __pageData,D as default};
