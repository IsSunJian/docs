import{_ as s,c as i,o as t,a4 as a}from"./chunks/framework.-JfgED0h.js";const e="/docs/assets/image-20220524181842626.9GgS_eKw.png",n="/docs/assets/image-20220524185659727.CAvwoHA7.png",l="/docs/assets/image-20220524190400547.BJeexxOV.png",h="/docs/assets/image-20220524191137983.BWTt_DaX.png",p="/docs/assets/image-20220524205926164.mdQxwmRT.png",k="/docs/assets/new.CLYP_qtQ.gif",r="/docs/assets/image-20220525112632214.nzBw-caa.png",d="/docs/assets/image-20220524201258092.CmrvdNev.png",g="/docs/assets/image-20220525131017888.CSGGiFBv.png",o="/docs/assets/image-20220525140217446.CUBFmS4q.png",c="/docs/assets/image-20220525141608974.BUdLTuCs.png",F="/docs/assets/image-20220525170205272.CHpdbYlp.png",y="/docs/assets/image-20220525170925364.B-Yg1a3c.png",E="/docs/assets/image-20220525171340322.BrIGmi5N.png",u="/docs/assets/image-20220525172001057.C6u0vbT8.png",C="/docs/assets/image-20220525172508234.ROa0wb0h.png",_=JSON.parse('{"title":"一、Redis入门","description":"","frontmatter":{},"headers":[],"relativePath":"home/Redis.md","filePath":"home/Redis.md"}'),m={name:"home/Redis.md"},b=a('<h1 id="一、redis入门" tabindex="-1">一、Redis入门 <a class="header-anchor" href="#一、redis入门" aria-label="Permalink to &quot;一、Redis入门&quot;">​</a></h1><h2 id="_1-认识nosql" tabindex="-1">1.认识NoSQL <a class="header-anchor" href="#_1-认识nosql" aria-label="Permalink to &quot;1.认识NoSQL&quot;">​</a></h2><h3 id="_1-1什么是nosql" tabindex="-1">1.1 什么是NoSQL <a class="header-anchor" href="#_1-1什么是nosql" aria-label="Permalink to &quot;1.1	什么是NoSQL&quot;">​</a></h3><hr><ul><li>NoSQL最常见的解释是&quot;<code>non-relational</code>&quot;， 很多人也说它是&quot;<em><strong>Not Only SQL</strong></em>&quot;</li><li>NoSQL仅仅是一个概念，泛指<strong>非关系型的数据库</strong></li><li>区别于关系数据库，它们不保证关系数据的ACID特性</li><li>NoSQL是一项全新的数据库革命性运动，提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入</li><li>常见的NoSQL数据库有：<code>Redis</code>、<code>MemCache</code>、<code>MongoDB</code>等</li></ul><h3 id="_1-2nosql与sql的差异" tabindex="-1">1.2 NoSQL与SQL的差异 <a class="header-anchor" href="#_1-2nosql与sql的差异" aria-label="Permalink to &quot;1.2	NoSQL与SQL的差异&quot;">​</a></h3><hr><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">SQL</th><th style="text-align:center;">NoSQL</th></tr></thead><tbody><tr><td style="text-align:center;">数据结构</td><td style="text-align:center;">结构化</td><td style="text-align:center;">非结构化</td></tr><tr><td style="text-align:center;">数据关联</td><td style="text-align:center;">关联的</td><td style="text-align:center;">无关联的</td></tr><tr><td style="text-align:center;">查询方式</td><td style="text-align:center;">SQL查询</td><td style="text-align:center;">非SQL</td></tr><tr><td style="text-align:center;">事务特性</td><td style="text-align:center;">ACID</td><td style="text-align:center;">BASE</td></tr><tr><td style="text-align:center;">存储方式</td><td style="text-align:center;">磁盘</td><td style="text-align:center;">内存</td></tr><tr><td style="text-align:center;">扩展性</td><td style="text-align:center;">垂直</td><td style="text-align:center;">水平</td></tr><tr><td style="text-align:center;">使用场景</td><td style="text-align:center;">1）数据结构固定 2）相关业务对数据安全性、一致性要求较高</td><td style="text-align:center;">1）数据结构不固定 2）对一致性、安全性要求不高 3）对性能要求</td></tr></tbody></table><h2 id="_2-认识redis" tabindex="-1">2.认识Redis <a class="header-anchor" href="#_2-认识redis" aria-label="Permalink to &quot;2.认识Redis&quot;">​</a></h2><blockquote><p>Redis诞生于2009年全称是Remote Dictionary Server，远程词典服务器，是一个基于内存的键值型NoSQL数据库。</p></blockquote><p><strong>Redis的特征：</strong></p><ul><li>键值（<code>key-value</code>）型，value支持多种不同数据结构，功能丰富</li><li>单线程，每个命令具备原子性</li><li>低延迟，速度快（基于内存、IO多路复用、良好的编码）。</li><li>支持数据持久化</li><li>支持主从集群、分片集群</li><li>支持多语言客户端</li></ul><h2 id="_3-安装redis" tabindex="-1">3.安装Redis <a class="header-anchor" href="#_3-安装redis" aria-label="Permalink to &quot;3.安装Redis&quot;">​</a></h2><h3 id="_3-1前置准备" tabindex="-1">3.1 前置准备 <a class="header-anchor" href="#_3-1前置准备" aria-label="Permalink to &quot;3.1	前置准备&quot;">​</a></h3><hr><blockquote><p>本次安装Redis是基于Linux系统下安装的，因此需要一台Linux服务器或者虚拟机。</p><p>Ps：由于提供的CentOS操作系统为mini版，因此需要自行配置网络，不会配置的请联系我，如果您使用的是自己购买的服务器，请提前开放<code>6379</code>端口，避免后续出现的莫名其妙的错误！</p></blockquote><ul><li><p><strong>虚拟机</strong>：<a href="https://pan.baidu.com/s/1Zn13h9G7MtSgz-xdkQFeJg?pwd=1234" target="_blank" rel="noreferrer">VMware16</a></p></li><li><p><strong>操作系统</strong>：<a href="https://pan.baidu.com/s/1SiYip29cYqiNBqjGGV0JgA?pwd=1234" target="_blank" rel="noreferrer">CentOS-7-x86_64-Minimal-1708</a></p></li><li><p><strong>Redis</strong>：<a href="https://pan.baidu.com/s/1hsoEz1NTCDCCWZmaiZrIgg?pwd=1234" target="_blank" rel="noreferrer">redis-6.2.6.tar</a></p></li><li><p><strong>xShell及xFtp</strong>：<a href="https://www.xshell.com/zh/free-for-home-school/" target="_blank" rel="noreferrer">https://www.xshell.com/zh/free-for-home-school/</a></p></li></ul><h3 id="_3-2安装redis依赖" tabindex="-1">3.2 安装Redis依赖 <a class="header-anchor" href="#_3-2安装redis依赖" aria-label="Permalink to &quot;3.2	安装Redis依赖&quot;">​</a></h3><hr><blockquote><p>Redis是基于C语言编写的，因此首先需要安装Redis所需要的gcc依赖</p></blockquote><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> tcl</span></span></code></pre></div><p><strong>安装成功如下图所示：</strong></p><img src="'+e+'"><h3 id="_3-3正式安装redis" tabindex="-1">3.3 正式安装Redis <a class="header-anchor" href="#_3-3正式安装redis" aria-label="Permalink to &quot;3.3	正式安装Redis&quot;">​</a></h3><hr><ul><li><p><strong>将<code>redis-6.2.6.tar</code>上传至<code>/usr/local/src</code>目录</strong></p><img src="'+n+`"></li><li><p><strong>在xShell中<code>cd</code>到<code>/usr/local/src</code>目录执行以下命令进行解压操作</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">tar</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> -xzf</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> redis-6.2.6.tar.gz</span></span></code></pre></div></li><li><p><strong>解压成功后依次执行以下命令</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> redis-6.2.6</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">make</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> install</span></span></code></pre></div></li><li><p><strong>安装成功后打开/usr/local/bin目录（该目录为Redis默认的安装目录）</strong></p><img src="`+l+'"></li></ul><h2 id="_4-启动redis" tabindex="-1">4.启动Redis <a class="header-anchor" href="#_4-启动redis" aria-label="Permalink to &quot;4.启动Redis&quot;">​</a></h2><blockquote><p>Redis的启动方式有很多种，例如：<strong>前台启动</strong>、<strong>后台启动</strong>、<strong>开机自启</strong></p></blockquote><h3 id="_4-1前台启动-不推荐" tabindex="-1">4.1 前台启动（不推荐） <a class="header-anchor" href="#_4-1前台启动-不推荐" aria-label="Permalink to &quot;4.1	前台启动（不推荐）&quot;">​</a></h3><hr><blockquote><p><strong>这种启动属于前台启动，会阻塞整个会话窗口，窗口关闭或者按下<code>CTRL + C</code>则Redis停止。不推荐使用。</strong></p></blockquote><ul><li><p><strong>安装完成后，在任意目录输入<code>redis-server</code>命令即可启动Redis</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">redis-server</span></span></code></pre></div></li><li><p><strong>启动成功如下图所示</strong></p><img src="'+h+`"></li></ul><h3 id="_4-2后台启动-不推荐" tabindex="-1">4.2 后台启动（不推荐） <a class="header-anchor" href="#_4-2后台启动-不推荐" aria-label="Permalink to &quot;4.2	后台启动（不推荐）&quot;">​</a></h3><hr><blockquote><p><strong>如果要让Redis以后台方式启动，则必须修改Redis配置文件，配置文件所在目录就是之前我们解压的安装包下</strong></p></blockquote><ul><li><p><strong>因为我们要修改配置文件，因此我们需要先将原文件备份一份</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> /usr/local/src/redis-6.2.6</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> redis.conf</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> redis.conf.bck</span></span></code></pre></div></li><li><p><strong>然后修改<code>redis.conf</code>文件中的一些配置</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">bind</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 0.0.0.0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"># 守护进程，修改为yes后即可后台运行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">daemonize</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> yes</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"># 密码，设置后访问Redis必须输入密码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">requirepass</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 1325</span></span></code></pre></div></li><li><p><strong>Redis其他常用配置</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"># 监听的端口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">port</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 6379</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">dir</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> .</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">databases</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"># 设置redis能够使用的最大内存</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">maxmemory</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> 512mb</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">logfile</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">redis.log</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span></span></code></pre></div></li><li><p><strong>启动Redis</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"># 进入redis安装目录 </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> /usr/local/src/redis-6.2.6</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"># 启动</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">redis-server</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> redis.conf</span></span></code></pre></div></li><li><p><strong>停止Redis服务</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"># 通过kill命令直接杀死进程</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;">kill</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> -9</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> redis进程id</span></span></code></pre></div><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"># 利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"># 因为之前配置了密码，因此需要通过 -a 来指定密码</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">redis-cli</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 132537</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> shutdown</span></span></code></pre></div></li></ul><h3 id="_4-3开机自启-推荐" tabindex="-1">4.3 开机自启（推荐） <a class="header-anchor" href="#_4-3开机自启-推荐" aria-label="Permalink to &quot;4.3	开机自启（推荐）&quot;">​</a></h3><hr><blockquote><p><strong>我们也可以通过配置来实现开机自启</strong></p></blockquote><ul><li><p><strong>首先，新建一个系统服务文件</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">vi</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> /etc/systemd/system/redis.service</span></span></code></pre></div></li><li><p><strong>将以下命令粘贴进去</strong></p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>[Unit]</span></span>
<span class="line"><span>Description=redis-server</span></span>
<span class="line"><span>After=network.target</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[Service]</span></span>
<span class="line"><span>Type=forking</span></span>
<span class="line"><span>ExecStart=/usr/local/bin/redis-server /usr/local/src/redis-6.2.6/redis.conf</span></span>
<span class="line"><span>PrivateTmp=true</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[Install]</span></span>
<span class="line"><span>WantedBy=multi-user.target</span></span></code></pre></div></li><li><p><strong>然后重载系统服务</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> daemon-reload</span></span></code></pre></div></li><li><p><strong>现在，我们可以用下面这组命令来操作redis了</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"># 启动</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> redis</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"># 停止</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> stop</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> redis</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"># 重启</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> redis</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"># 查看状态</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> status</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> redis</span></span></code></pre></div></li><li><p><strong>执行下面的命令，可以让redis开机自启</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> redis</span></span></code></pre></div></li></ul><h1 id="二、redis常见命令" tabindex="-1">二、Redis常见命令 <a class="header-anchor" href="#二、redis常见命令" aria-label="Permalink to &quot;二、Redis常见命令&quot;">​</a></h1><blockquote><p>我们可以通过Redis的中文文档：<a href="http://www.redis.cn/commands.html%EF%BC%8C%E6%9D%A5%E5%AD%A6%E4%B9%A0%E5%90%84%E7%A7%8D%E5%91%BD%E4%BB%A4%E3%80%82" target="_blank" rel="noreferrer">http://www.redis.cn/commands.html，来学习各种命令。</a></p><p>也可以通过菜鸟教程官网来学习：<a href="https://www.runoob.com/redis/redis-keys.html" target="_blank" rel="noreferrer">https://www.runoob.com/redis/redis-keys.html</a></p></blockquote><h2 id="_1-redis数据结构介绍" tabindex="-1">1.Redis数据结构介绍 <a class="header-anchor" href="#_1-redis数据结构介绍" aria-label="Permalink to &quot;1.Redis数据结构介绍&quot;">​</a></h2><blockquote><p><strong>Redis是一个key-value的数据库，key一般是String类型，不过value的类型多种多样</strong></p></blockquote><img src="`+p+'"><h2 id="_2-通用命令" tabindex="-1">2.通用命令 <a class="header-anchor" href="#_2-通用命令" aria-label="Permalink to &quot;2.通用命令&quot;">​</a></h2><blockquote><p><strong>通用指令是部分数据类型的，都可以使用的指令，常见的有如下表格所示</strong></p></blockquote><table><thead><tr><th style="text-align:center;">指令</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">KEYS</td><td style="text-align:center;">查看符合模板的所有key，不建议在生产环境设备上使用</td></tr><tr><td style="text-align:center;">DEL</td><td style="text-align:center;">删除一个指定的key</td></tr><tr><td style="text-align:center;">EXISTS</td><td style="text-align:center;">判断key是否存在</td></tr><tr><td style="text-align:center;">EXPIRE</td><td style="text-align:center;">给一个key设置有效期，有效期到期时该key会被自动删除</td></tr><tr><td style="text-align:center;">TTL</td><td style="text-align:center;">查看一个KEY的剩余有效期</td></tr></tbody></table><p><strong>可以通过<code>help [command] </code>可以查看一个命令的具体用法！</strong></p><h2 id="_3-string类型" tabindex="-1">3.String类型 <a class="header-anchor" href="#_3-string类型" aria-label="Permalink to &quot;3.String类型&quot;">​</a></h2><blockquote><p><strong>String类型，也就是字符串类型，是Redis中最简单的存储类型。</strong></p></blockquote><p>其value是字符串，不过根据字符串的格式不同，又可以分为3类：</p><ul><li><code>string</code>：普通字符串</li><li><code>int</code>：整数类型，可以做自增、自减操作</li><li><code>float</code>：浮点类型，可以做自增、自减操作</li></ul><blockquote><p>不管是哪种格式，底层都是字节数组形式存储，只不过是编码方式不同。字符串类型的最大空间不能超过<strong>512m</strong>.</p></blockquote><table><thead><tr><th style="text-align:center;">KEY</th><th style="text-align:center;">VALUE</th></tr></thead><tbody><tr><td style="text-align:center;">msg</td><td style="text-align:center;">hello world</td></tr><tr><td style="text-align:center;">num</td><td style="text-align:center;">10</td></tr><tr><td style="text-align:center;">score</td><td style="text-align:center;">92.5</td></tr></tbody></table><blockquote><p><strong>String的常见命令有如下表格所示</strong></p></blockquote><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">SET</td><td style="text-align:center;">添加或者修改已经存在的一个String类型的键值对</td></tr><tr><td style="text-align:center;">GET</td><td style="text-align:center;">根据key获取String类型的value</td></tr><tr><td style="text-align:center;">MSET</td><td style="text-align:center;">批量添加多个String类型的键值对</td></tr><tr><td style="text-align:center;">MGET</td><td style="text-align:center;">根据多个key获取多个String类型的value</td></tr><tr><td style="text-align:center;">INCR</td><td style="text-align:center;">让一个整型的key自增1</td></tr><tr><td style="text-align:center;">INCRBY</td><td style="text-align:center;">让一个整型的key自增并指定步长，例如：incrby num 2 让num值自增2</td></tr><tr><td style="text-align:center;">INCRBYFLOAT</td><td style="text-align:center;">让一个浮点类型的数字自增并指定步长</td></tr><tr><td style="text-align:center;">SETNX</td><td style="text-align:center;">添加一个String类型的键值对，前提是这个key不存在，否则不执行</td></tr><tr><td style="text-align:center;"><strong>SETEX</strong></td><td style="text-align:center;">添加一个String类型的键值对，并且指定有效期</td></tr></tbody></table><blockquote><p><strong>Redis的key允许有多个单词形成层级结构，多个单词之间用” ：“隔开，格式如下：</strong></p></blockquote><div class="language-tex vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">项目名:业务名:类型:id</span></span></code></pre></div><p>这个格式并非固定，也可以根据自己的需求来删除或添加词条。</p><p>例如我们的项目名称叫 <code>heima</code>，有<code>user</code>和<code>product</code>两种不同类型的数据，我们可以这样定义key：</p><ul><li><strong>user</strong>相关的key：<code>heima:user:1</code></li><li><strong>product</strong>相关的key：<code>heima:product:1</code></li></ul><p>如果Value是一个Java对象，例如一个User对象，则可以将对象序列化为JSON字符串后存储</p><table><thead><tr><th style="text-align:center;">KEY</th><th style="text-align:center;">VALUE</th></tr></thead><tbody><tr><td style="text-align:center;">heima:user:1</td><td style="text-align:center;"><code>{&quot;id&quot;:1, &quot;name&quot;: &quot;Jack&quot;, &quot;age&quot;: 21}</code></td></tr><tr><td style="text-align:center;">heima:product:1</td><td style="text-align:center;"><code>{&quot;id&quot;:1, &quot;name&quot;: &quot;小米11&quot;, &quot;price&quot;: 4999}</code></td></tr></tbody></table><h2 id="_4-hash类型" tabindex="-1">4.Hash类型 <a class="header-anchor" href="#_4-hash类型" aria-label="Permalink to &quot;4.Hash类型&quot;">​</a></h2><blockquote><p><strong>Hash类型，也叫散列，其value是一个无序字典，类似于Java中的<code>HashMap</code>结构。</strong></p></blockquote><ul><li><p><strong>Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD</strong></p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/Redis/image-20220525001227167.png" alt="image-20220525001227167"></li><li><p><strong>Hash的常见命令有：</strong></p><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">HSET key field value</td><td style="text-align:center;">添加或者修改hash类型key的field的值</td></tr><tr><td style="text-align:center;">HGET key field</td><td style="text-align:center;">获取一个hash类型key的field的值</td></tr><tr><td style="text-align:center;">HMSET</td><td style="text-align:center;">hmset 和 hset 效果相同 ，4.0之后hmset可以弃用了</td></tr><tr><td style="text-align:center;">HMGET</td><td style="text-align:center;">批量获取多个hash类型key的field的值</td></tr><tr><td style="text-align:center;">HGETALL</td><td style="text-align:center;">获取一个hash类型的key中的所有的field和value</td></tr><tr><td style="text-align:center;">HKEYS</td><td style="text-align:center;">获取一个hash类型的key中的所有的field</td></tr><tr><td style="text-align:center;">HVALS</td><td style="text-align:center;">获取一个hash类型的key中的所有的value</td></tr><tr><td style="text-align:center;">HINCRBY</td><td style="text-align:center;">让一个hash类型key的字段值自增并指定步长</td></tr><tr><td style="text-align:center;">HSETNX</td><td style="text-align:center;">添加一个hash类型的key的field值，前提是这个field不存在，否则不执行</td></tr></tbody></table></li></ul><h2 id="_5-list类型" tabindex="-1">5.List类型 <a class="header-anchor" href="#_5-list类型" aria-label="Permalink to &quot;5.List类型&quot;">​</a></h2><blockquote><p><strong>Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。</strong></p></blockquote><p><strong>特征也与<code>LinkedList</code>类似：</strong></p><ul><li>有序</li><li>元素可以重复</li><li>插入和删除快</li><li>查询速度一般</li></ul><p>常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等.</p><blockquote><p><strong>List的常见命令有</strong></p></blockquote><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">LPUSH key element ...</td><td style="text-align:center;">向列表左侧插入一个或多个元素</td></tr><tr><td style="text-align:center;">LPOP key</td><td style="text-align:center;">移除并返回列表左侧的第一个元素，没有则返回nil</td></tr><tr><td style="text-align:center;"><strong>RPUSH key element ...</strong></td><td style="text-align:center;">向列表右侧插入一个或多个元素</td></tr><tr><td style="text-align:center;">RPOP key</td><td style="text-align:center;">移除并返回列表右侧的第一个元素</td></tr><tr><td style="text-align:center;">LRANGE key star end</td><td style="text-align:center;">返回一段角标范围内的所有元素</td></tr><tr><td style="text-align:center;">BLPOP和BRPOP</td><td style="text-align:center;">与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil</td></tr></tbody></table><img src="'+k+'"><blockquote><p><strong>思考问题</strong></p></blockquote><ul><li><p><strong>如何利用List结构模拟一个栈?</strong></p><ul><li>先进后出，入口和出口在同一边</li></ul></li><li><p><strong>如何利用List结构模拟一个队列?</strong></p><ul><li>先进先出，入口和出口在不同边</li></ul></li><li><p><strong>如何利用List结构模拟一个阻塞队列?</strong></p><ul><li>入口和出口在不同边</li><li>出队时采用BLPOP或BRPOP</li></ul></li></ul><h2 id="_6-set类型" tabindex="-1">6.Set类型 <a class="header-anchor" href="#_6-set类型" aria-label="Permalink to &quot;6.Set类型&quot;">​</a></h2><blockquote><p><strong>Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的特征</strong></p></blockquote><ul><li>无序</li><li>元素不可重复</li><li>查找快</li><li>支持交集、并集、差集等功能</li></ul><blockquote><p><strong>Set的常见命令有</strong></p></blockquote><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">SADD key member ...</td><td style="text-align:center;">向set中添加一个或多个元素</td></tr><tr><td style="text-align:center;">SREM key member ...</td><td style="text-align:center;">移除set中的指定元素</td></tr><tr><td style="text-align:center;">SCARD key</td><td style="text-align:center;">返回set中元素的个数</td></tr><tr><td style="text-align:center;">SISMEMBER key member</td><td style="text-align:center;">判断一个元素是否存在于set中</td></tr><tr><td style="text-align:center;">SMEMBERS</td><td style="text-align:center;">获取set中的所有元素</td></tr><tr><td style="text-align:center;">SINTER key1 key2 ...</td><td style="text-align:center;">求key1与key2的交集</td></tr><tr><td style="text-align:center;">SDIFF key1 key2 ...</td><td style="text-align:center;">求key1与key2的差集</td></tr><tr><td style="text-align:center;">SUNION key1 key2 ..</td><td style="text-align:center;">求key1和key2的并集</td></tr></tbody></table><blockquote><p><strong>交集、差集、并集图示</strong></p></blockquote><img src="'+r+'"><h2 id="_7-sortedset类型" tabindex="-1">7.SortedSet类型 <a class="header-anchor" href="#_7-sortedset类型" aria-label="Permalink to &quot;7.SortedSet类型&quot;">​</a></h2><blockquote><p><strong>Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。</strong></p></blockquote><p><strong>SortedSet具备下列特性：</strong></p><ul><li>可排序</li><li>元素不重复</li><li>查询速度快</li></ul><p>因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。</p><blockquote><p><strong>SortedSet的常见命令有</strong></p></blockquote><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">ZADD key score member</td><td style="text-align:center;">添加一个或多个元素到sorted set ，如果已经存在则更新其score值</td></tr><tr><td style="text-align:center;">ZREM key member</td><td style="text-align:center;">删除sorted set中的一个指定元素</td></tr><tr><td style="text-align:center;">ZSCORE key member</td><td style="text-align:center;">获取sorted set中的指定元素的score值</td></tr><tr><td style="text-align:center;">ZRANK key member</td><td style="text-align:center;">获取sorted set 中的指定元素的排名</td></tr><tr><td style="text-align:center;">ZCARD key</td><td style="text-align:center;">获取sorted set中的元素个数</td></tr><tr><td style="text-align:center;">ZCOUNT key min max</td><td style="text-align:center;">统计score值在给定范围内的所有元素的个数</td></tr><tr><td style="text-align:center;">ZINCRBY key increment member</td><td style="text-align:center;">让sorted set中的指定元素自增，步长为指定的increment值</td></tr><tr><td style="text-align:center;">ZRANGE key min max</td><td style="text-align:center;">按照score排序后，获取指定排名范围内的元素</td></tr><tr><td style="text-align:center;">ZRANGEBYSCORE key min max</td><td style="text-align:center;">按照score排序后，获取指定score范围内的元素</td></tr><tr><td style="text-align:center;">ZDIFF、ZINTER、ZUNION</td><td style="text-align:center;">求差集、交集、并集</td></tr></tbody></table><p><strong>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加<code>REV</code>即可</strong></p><h1 id="三、redis客户端" tabindex="-1">三、Redis客户端 <a class="header-anchor" href="#三、redis客户端" aria-label="Permalink to &quot;三、Redis客户端&quot;">​</a></h1><blockquote><p>安装完成Redis，我们就可以操作Redis，实现数据的CRUD了。这需要用到Redis客户端，包括：</p></blockquote><ul><li><strong>命令行客户端</strong></li><li><strong>图形化桌面客户端</strong></li><li><strong>编程客户端</strong></li></ul><h2 id="_1-命令行客户端" tabindex="-1">1.命令行客户端 <a class="header-anchor" href="#_1-命令行客户端" aria-label="Permalink to &quot;1.命令行客户端&quot;">​</a></h2><ul><li><p><strong>Redis安装完成后就自带了命令行客户端：<code>redis-cli</code>，使用方式如下：</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">redis-cli</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> [options] [commonds]</span></span></code></pre></div></li><li><p><strong>其中常见的<code>options</code>有：</strong></p><ul><li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li><li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li><li><code>-a 132537</code>：指定redis的访问密码</li></ul></li><li><p><strong>其中的<code>commonds</code>就是Redis的操作命令，例如：</strong></p><ul><li><code>ping</code>：与redis服务端做心跳测试，服务端正常会返回<code>pong</code></li><li>不指定commond时，会进入<code>redis-cli</code>的交互控制台：</li></ul></li></ul><img src="'+d+`"><h2 id="_2-图形化客户端" tabindex="-1">2.图形化客户端 <a class="header-anchor" href="#_2-图形化客户端" aria-label="Permalink to &quot;2.图形化客户端&quot;">​</a></h2><blockquote><p>下载地址：<a href="https://pan.baidu.com/s/1sxQTOt-A5MCvVZnlgDf0eA?pwd=1234" target="_blank" rel="noreferrer">https://pan.baidu.com/s/1sxQTOt-A5MCvVZnlgDf0eA?pwd=1234</a></p></blockquote><ul><li><p><strong>安装图形化客户端</strong></p><div class="language-tex vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">安装步骤过于简单不再演示</span></span></code></pre></div></li><li><p><strong>如何连接到Redis</strong></p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/Redis/image-20220524202853286.png" alt="image-20220524202853286" style="zoom:80%;"></li><li><p><strong>连接成功后如图所示</strong></p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/Redis/image-20220524203745436.png" alt="image-20220524203745436" style="zoom:80%;"></li></ul><h2 id="_3-java客户端" tabindex="-1">3.Java客户端 <a class="header-anchor" href="#_3-java客户端" aria-label="Permalink to &quot;3.Java客户端&quot;">​</a></h2><h3 id="_3-1jedis快速入门" tabindex="-1">3.1 Jedis快速入门 <a class="header-anchor" href="#_3-1jedis快速入门" aria-label="Permalink to &quot;3.1	Jedis快速入门&quot;">​</a></h3><hr><blockquote><p>Jedis的官网地址： <a href="https://github.com/redis/jedis%EF%BC%8C%E6%88%91%E4%BB%AC%E5%85%88%E6%9D%A5%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%EF%BC%9A" target="_blank" rel="noreferrer">https://github.com/redis/jedis，我们先来个快速入门：</a></p></blockquote><ul><li><p><strong>新建一个Maven工程并引入以下依赖</strong></p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">&lt;!--引入Jedis依赖--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;redis.clients&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;jedis&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;4.2.0&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">&lt;!--引入单元测试依赖--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;org.junit.jupiter&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;junit-jupiter&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;5.8.2&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;test&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;</span></span></code></pre></div></li><li><p><strong>编写测试类并与Redis建立连接</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">private</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Jedis</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> jedis;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">BeforeEach</span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> //被该注解修饰的方法每次执行其他方法前自动执行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> setUp</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 1. 获取连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    jedis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> Jedis</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">192.168.230.88</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">6379</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 2. 设置密码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    jedis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">auth</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">132537</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 3. 选择库（默认是下标为0的库）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    jedis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div></li><li><p><strong>编写一个操作数据的方法（这里以操作String类型为例）</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> testString</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 1.往redis中存放一条String类型的数据并获取返回结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> jedis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">url</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">https://www.oz6.cn</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">result = </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> result);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // 2.从redis中获取一条数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> jedis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">url</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">url = </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> url);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div></li><li><p><strong>最后不要忘记编写一个释放资源的方法</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">AfterEach</span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> //被该注解修饰的方法会在每次执行其他方法后执行</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> tearDown</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 1.释放资源</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (jedis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">            jedis.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span></code></pre></div></li><li><p><strong>执行<code>testString()</code>方法后测试结果如图所示</strong></p><img src="`+g+`"></li></ul><h3 id="_3-2jedis连接池" tabindex="-1">3.2 Jedis连接池 <a class="header-anchor" href="#_3-2jedis连接池" aria-label="Permalink to &quot;3.2	Jedis连接池&quot;">​</a></h3><hr><blockquote><p><strong>Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此我们推荐大家使用Jedis连接池代替Jedis的直连方式</strong></p></blockquote><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> JedisConnectionFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> JedisPool</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> jedisPool;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    static</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        //配置连接池</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        JedisPoolConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> jedisPoolConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> JedisPoolConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        jedisPoolConfig.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">setMaxTotal</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        jedisPoolConfig.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">setMaxIdle</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        jedisPoolConfig.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">setMinIdle</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        jedisPoolConfig.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">setMaxWaitMillis</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        //创建连接池对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        jedisPool </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> JedisPool</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(jedisPoolConfig,</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">192.168.230.88</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">6379</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">132537</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Jedis</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> getJedis</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">       return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> jedisPool.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">getResource</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><h3 id="_3-3springdataredis介绍" tabindex="-1">3.3 SpringDataRedis介绍 <a class="header-anchor" href="#_3-3springdataredis介绍" aria-label="Permalink to &quot;3.3	SpringDataRedis介绍&quot;">​</a></h3><hr><blockquote><p><strong>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做<code>SpringDataRedis</code></strong></p><p><strong>官网地址</strong>：<a href="https://spring.io/projects/spring-data-redis" target="_blank" rel="noreferrer">https://spring.io/projects/spring-data-redis</a></p></blockquote><ul><li>提供了对不同Redis客户端的整合（<code>Lettuce</code>和<code>Jedis</code>）</li><li>提供了<code>RedisTemplate</code>统一API来操作Redis</li><li>支持Redis的发布订阅模型</li><li>支持Redis哨兵和Redis集群</li><li>支持基于Lettuce的响应式编程</li><li>支持基于JDK、JSON、字符串、Spring对象的数据序列化及反序列化</li><li>支持基于Redis的JDKCollection实现</li></ul><blockquote><p><strong>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：</strong></p></blockquote><img src="`+o+'"><h3 id="_3-4-springdataredis快速入门" tabindex="-1">3.4 SpringDataRedis快速入门 <a class="header-anchor" href="#_3-4-springdataredis快速入门" aria-label="Permalink to &quot;3.4 SpringDataRedis快速入门&quot;">​</a></h3><hr><blockquote><p><strong><code>SpringBoot</code>已经提供了对<code>SpringDataRedis</code>的支持，使用非常简单</strong></p></blockquote><ul><li><p><strong>首先新建一个Spring Boot工程</strong></p><img src="'+c+`"></li><li><p><strong>然后引入连接池依赖</strong></p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">&lt;!--连接池依赖--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;org.apache.commons&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;commons-pool2&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#F286C4;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;</span></span></code></pre></div></li><li><p><strong>编写配置文件<code>application.yml</code>（连接池的配置在实际开发中是根据需求来的）</strong></p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#97E1F1;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#97E1F1;">  redis</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#97E1F1;">    host</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 192.168.230.88</span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> #指定redis所在的host</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#97E1F1;">    port</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 6379</span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  #指定redis的端口</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#97E1F1;">    password</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 132537</span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  #设置redis密码</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#97E1F1;">    lettuce</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#97E1F1;">      pool</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#97E1F1;">        max-active</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 8</span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> #最大连接数</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#97E1F1;">        max-idle</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 8</span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> #最大空闲数</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#97E1F1;">        min-idle</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> #最小空闲数</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#97E1F1;">        max-wait</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;"> 100ms</span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> #连接等待时间</span></span></code></pre></div></li><li><p><strong>编写测试类执行测试方法</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">SpringBootTest</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> RedisDemoApplicationTests</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Resource</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">	private</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> RedisTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> redisTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> testString</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">		// 1.通过RedisTemplate获取操作String类型的ValueOperations对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		ValueOperations</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> ops </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> redisTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">opsForValue</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">		// 2.插入一条数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">		ops.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">blogName</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">Vz-Blog</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">		</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">		// 3.获取数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> blogName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (String) ops.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">blogName</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">blogName = </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> blogName);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div></li></ul><h3 id="_3-5redisserializer配置" tabindex="-1">3.5 RedisSerializer配置 <a class="header-anchor" href="#_3-5redisserializer配置" aria-label="Permalink to &quot;3.5	RedisSerializer配置&quot;">​</a></h3><hr><blockquote><p><strong>RedisTemplate可以接收任意Object作为值写入Redis，只不过写入前会把Object序列化为字节形式，<code>默认是采用JDK序列化</code>，得到的结果是这样的</strong></p></blockquote><img src="`+F+`"><p><strong>缺点：</strong></p><ul><li>可读性差</li><li>内存占用较大</li></ul><blockquote><p><strong>那么如何解决以上的问题呢？我们可以通过自定义RedisTemplate序列化的方式来解决。</strong></p></blockquote><ul><li><p><strong>编写一个配置类<code>RedisConfig</code></strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> RedisConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Bean</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> RedisTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">redisTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">RedisConnectionFactory</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> factory</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 1.创建RedisTemplate对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        RedisTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> ,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F6F6F4;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; redisTemplate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> RedisTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 2.设置连接工厂</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        redisTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">setConnectionFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(factory);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 3.创建序列化对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        StringRedisSerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> stringRedisSerializer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> StringRedisSerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        GenericJackson2JsonRedisSerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> genericJackson2JsonRedisSerializer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> GenericJackson2JsonRedisSerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 4.设置key和hashKey采用String的序列化方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        redisTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">setKeySerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(stringRedisSerializer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        redisTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">setHashKeySerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(stringRedisSerializer);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">        // 5.设置value和hashValue采用json的序列化方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        redisTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">setValueSerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(genericJackson2JsonRedisSerializer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">        redisTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">setHashValueSerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(genericJackson2JsonRedisSerializer);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> redisTemplate;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div></li><li><p><strong>此时我们已经将RedisTemplate的key设置为<code>String序列化</code>，value设置为<code>Json序列化</code>的方式，再来执行方法测试</strong></p><img src="`+y+`"></li><li><p><strong>由于我们设置的value序列化方式是Json的，因此我们可以直接向redis中插入一个对象</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> testSaveUser</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    redisTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">opsForValue</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">user:100</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">Vz</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    User</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (User) redisTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">opsForValue</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">user:100</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">User = </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> user);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><img src="`+E+'"><p>尽管Json序列化可以满足我们的需求，但是依旧存在一些问题。</p><p>如上图所示，为了在反序列化时知道对象的类型，JSON序列化器会将类的class类型写入json结果中，存入Redis，会带来额外的内存开销。</p><p>那么我们如何解决这个问题呢？我们可以通过下文的<code>StringRedisTemplate</code>来解决这个问题。</p></li></ul><h3 id="_3-6stringredistemplate" tabindex="-1">3.6 StringRedisTemplate <a class="header-anchor" href="#_3-6stringredistemplate" aria-label="Permalink to &quot;3.6	StringRedisTemplate&quot;">​</a></h3><hr><blockquote><p><strong>为了节省内存空间，我们并不会使用JSON序列化器来处理value，而是统一使用String序列化器，要求只能存储String类型的key和value。当需要存储Java对象时，手动完成对象的序列化和反序列化。</strong></p></blockquote><img src="'+u+`"><blockquote><p><strong>Spring默认提供了一个StringRedisTemplate类，它的key和value的序列化方式默认就是String方式。省去了我们自定义RedisTemplate的过程</strong></p></blockquote><ul><li><p><strong>我们可以直接编写一个测试类使用StringRedisTemplate来执行以下方法</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">SpringBootTest</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;"> RedisStringTemplateTest</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Resource</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">	private</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> StringRedisTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> stringRedisTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">	void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> testSaveUser</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> JsonProcessingException</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">		// 1.创建一个Json序列化对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		ObjectMapper</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> objectMapper </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> ObjectMapper</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">		// 2.将要存入的对象通过Json序列化对象转换为字符串</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> userJson1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> objectMapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">writeValueAsString</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">Vz</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">));</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">		// 3.通过StringRedisTemplate将数据存入redis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">		stringRedisTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">opsForValue</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">user:100</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,userJson1);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">		// 4.通过key取出value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		String</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> userJson2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> stringRedisTemplate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">opsForValue</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">user:100</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">		// 5.由于取出的值是String类型的Json字符串，因此我们需要通过Json序列化对象来转换为java对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">		User</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> objectMapper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">readValue</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(userJson2, User.class);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">		// 6.打印结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">		System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">user = </span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> user);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div></li><li><p><strong>执行完毕回到Redis的图形化客户端查看结果</strong></p><img src="`+C+'"></li></ul><h3 id="_3-7总结" tabindex="-1">3.7 总结 <a class="header-anchor" href="#_3-7总结" aria-label="Permalink to &quot;3.7	总结&quot;">​</a></h3><hr><blockquote><p>RedisTemplate的两种序列化实践方案，两种方案各有各的优缺点，可以根据实际情况选择使用。</p></blockquote><p>方案一：</p><ol><li>自定义RedisTemplate</li><li>修改RedisTemplate的序列化器为GenericJackson2JsonRedisSerializer</li></ol><p>方案二：</p><ol><li>使用StringRedisTemplate</li><li>写入Redis时，手动把对象序列化为JSON</li><li>读取Redis时，手动把读取到的JSON反序列化为对象</li></ol>',141),f=[b];function v(x,q,D,A,B,S){return t(),i("div",null,f)}const T=s(m,[["render",v]]);export{_ as __pageData,T as default};
