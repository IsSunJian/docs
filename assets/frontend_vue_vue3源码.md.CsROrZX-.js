import{_ as t,E as n,c as h,J as l,w as k,a as s,a4 as i,m as e,o as p}from"./chunks/framework.K9vKjHgL.js";const v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/vue/vue3源码.md","filePath":"frontend/vue/vue3源码.md"}'),r={name:"frontend/vue/vue3源码.md"},F=i(`<h2 id="响应式基础api-reactive-ts" tabindex="-1">响应式基础API(reactive.ts) <a class="header-anchor" href="#响应式基础api-reactive-ts" aria-label="Permalink to &quot;响应式基础API(reactive.ts)&quot;">​</a></h2><blockquote><p><a href="https://github.com/vuejs/core/blob/main/packages/reactivity/src/reactive.ts" target="_blank" rel="noreferrer">源码文件地址</a></p><p>源码调试方法</p><ul><li><code>node</code>版本要大于16，装依赖</li><li>执行<code>dev</code>命令，比如<code>yarn dev</code></li><li>页面中引用<code>dist/vue.global.js</code>即可</li></ul><p>源码本身也有一些<code>examples html</code>，比如<code>packages/vue/examples/composition/commits.html</code></p></blockquote><h3 id="createreactiveobject" tabindex="-1">createReactiveObject <a class="header-anchor" href="#createreactiveobject" aria-label="Permalink to &quot;createReactiveObject&quot;">​</a></h3><blockquote><p><strong>创建响应式对象的方法</strong>，非常重要</p><p><code>baseHandlers</code>和<code>collectionHandlers</code>是调用对应的方法时就确定好的，就是<code>reactive</code>、<code>readonly</code>...</p><p><code>proxyMap</code>也是调用对应的方法时就确定好的，而<code>proxyMap</code>对应的是以下4种</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> reactiveMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> WeakMap</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Target</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> shallowReactiveMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> WeakMap</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Target</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> readonlyMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> WeakMap</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Target</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> shallowReadonlyMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> WeakMap</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Target</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;()</span></span></code></pre></div></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> createReactiveObject</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Target</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  isReadonly</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  baseHandlers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> ProxyHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  collectionHandlers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> ProxyHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  proxyMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> WeakMap</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">Target</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 如果target的类型不属于Object, Array, Map, Set, WeakMap, WeakSet其中的一个，则直接返回</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">isObject</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (__DEV__) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">warn</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">\`value cannot be made reactive: </span><span style="--shiki-light:#032F62;--shiki-dark:#F286C4;">\${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">String</span><span style="--shiki-light:#032F62;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">target</span><span style="--shiki-light:#032F62;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#F286C4;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> target</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 如果target已经是一个由本方法创建的proxy了，直接返回</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 例外: 调用readonly创建reactive对象的只读副本 e.g. readonly(reactive({}))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    target[ReactiveFlags.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">RAW</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    !</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(isReadonly </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> target[ReactiveFlags.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">IS_REACTIVE</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  ) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> target</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 在对应的缓存列表(WeakMap)中寻找对应的Proxy</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> existingProxy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> proxyMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (existingProxy) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> existingProxy</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // only a whitelist of value types can be observed.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> targetType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> getTargetType</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 判断target的类型是否符合要求，TargetType.INVALID代表target不能扩展或者被标记了不能转换为响应式对象(markRaw)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (targetType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> TargetType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">INVALID</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> target</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> proxy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;--shiki-light-font-weight:inherit;--shiki-dark-font-weight:bold;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    target,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // Map, Set, WeakMap, WeakSet使用collectionHandlers</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // Object, Array使用baseHandlers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    targetType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> TargetType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">COLLECTION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> collectionHandlers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> baseHandlers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  )</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 缓存起来</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  proxyMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target, proxy)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> proxy</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p><strong>有了<code>createReactiveObject</code>，下面4中创建响应式对象的方法，只要传对应的参数即可</strong></p><h3 id="reactive" tabindex="-1">reactive <a class="header-anchor" href="#reactive" aria-label="Permalink to &quot;reactive&quot;">​</a></h3><blockquote><p>创建响应式对象并返回副本，响应式转换是“深层”的</p><p>如果任何 <code>property</code> 使用了 <code>ref</code>，当它通过代理访问时，则被自动解包</p><p>如果传入的<code>target</code>是一个<code>readonly</code>代理，则直接返回<code>target</code></p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> UnwrapNestedRefs</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // if trying to observe a readonly proxy, return the readonly version.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 如果尝试观察只读代理，返回只读版本。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">isReadonly</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> target</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> createReactiveObject</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    target,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">    false</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 不是只读</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    mutableHandlers, </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 对应的baseHandlers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    mutableCollectionHandlers, </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 对应的collectionHandlers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    reactiveMap </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 对应的proxyMap</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><h3 id="readonly" tabindex="-1">readonly <a class="header-anchor" href="#readonly" aria-label="Permalink to &quot;readonly&quot;">​</a></h3><blockquote><p>接受一个对象 (响应式或纯对象) 或 <a href="https://v3.cn.vuejs.org/api/refs-api.html#ref" target="_blank" rel="noreferrer">ref</a> 并返回原始对象的只读代理。只读代理是深层的：任何被访问的嵌套 <code>property</code> 也是只读的。</p><p>如果任何 property 使用了 <code>ref</code>，当它通过代理访问时，则被自动解包</p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> readonly</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> DeepReadonly</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">UnwrapNestedRefs</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> createReactiveObject</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    target,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">    true</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    readonlyHandlers,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    readonlyCollectionHandlers,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    readonlyMap</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><h3 id="shallowreactive" tabindex="-1">shallowReactive <a class="header-anchor" href="#shallowreactive" aria-label="Permalink to &quot;shallowReactive&quot;">​</a></h3><blockquote><p>返回浅层的响应式对象副本，只有根级别属性是响应的，不会自动展开<code>ref</code>(即使是根属性的<code>ref</code>)</p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> shallowReactive</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">  target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> ShallowReactive</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> createReactiveObject</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    target,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">    false</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    shallowReactiveHandlers,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    shallowCollectionHandlers,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    shallowReactiveMap</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><h3 id="shallowreadonly" tabindex="-1">shallowReadonly <a class="header-anchor" href="#shallowreadonly" aria-label="Permalink to &quot;shallowReadonly&quot;">​</a></h3><blockquote><p>返回浅层的响应式对象<strong>只读副本</strong>，只有根级别属性是响应的，不会自动展开<code>ref</code>(即使是根属性的<code>ref</code>)</p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> shallowReadonly</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Readonly</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> createReactiveObject</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    target,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">    true</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    shallowReadonlyHandlers,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    shallowReadonlyCollectionHandlers,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    shallowReadonlyMap</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><ul><li><p>都是由<code>createReactiveObject</code>创建的代理</p></li><li><p><code>reactive</code>、<code>readonly</code> 会进行<strong>深层</strong>的转换，在<code>get</code>的时候将解包所有深层的 <a href="https://v3.cn.vuejs.org/api/refs-api.html#ref" target="_blank" rel="noreferrer">refs</a>，同时维持 <code>ref</code> 的响应性。</p></li><li><p><code>shallowReactive</code>、<code>shallowReadonly</code> 会进行<strong>浅层</strong>的转换(即根对象)，任何使用 <a href="https://v3.cn.vuejs.org/api/refs-api.html#ref" target="_blank" rel="noreferrer"><code>ref</code></a> 的 property 都<strong>不会</strong>被代理自动解包</p></li></ul><h3 id="reactiveflags" tabindex="-1">ReactiveFlags <a class="header-anchor" href="#reactiveflags" aria-label="Permalink to &quot;ReactiveFlags&quot;">​</a></h3><blockquote><p>从名字就可以看出，这些属性用于判断<code>响应式</code>对象的一些标识</p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> ReactiveFlags</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 跳过标识</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;">  SKIP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">__v_skip</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 是否为(reactive / shallowReactive)创建的响应式对象</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;">  IS_REACTIVE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">__v_isReactive</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 是否为只读响应式代理(readonly / shallowReadonly)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;">  IS_READONLY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">__v_isReadonly</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 是否为浅层代理</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;">  IS_SHALLOW</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">__v_isShallow</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 原始对象</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;">  RAW</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">__v_raw</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Target</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  [ReactiveFlags.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">SKIP</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  [ReactiveFlags.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">IS_REACTIVE</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  [ReactiveFlags.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">IS_READONLY</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  [ReactiveFlags.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">IS_SHALLOW</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  [ReactiveFlags.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">RAW</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><h4 id="is-reactive" tabindex="-1">IS_REACTIVE <a class="header-anchor" href="#is-reactive" aria-label="Permalink to &quot;IS_REACTIVE&quot;">​</a></h4><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>其中<code>ReactiveFlags.IS_REACTIVE</code>比较特殊，他的值取决于<code>target</code>的<code>isReadonly</code>。<code>isReadonly</code>是在创建<code>proxy</code>的时候就确定好的(具体的实现是在<code>proxy</code>的<code>handler</code>中)</p><blockquote><p>拿<code>baseHandlers.ts</code>举例</p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> get</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> /*#__PURE__*/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> createGetter</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> shallowGet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> /*#__PURE__*/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> createGetter</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> readonlyGet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> /*#__PURE__*/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> createGetter</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> shallowReadonlyGet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> /*#__PURE__*/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> createGetter</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)</span></span></code></pre></div></div><p><code>reactive</code>、<code>readonly</code>、<code>shallowReactive</code>、<code>shallowReadonly</code>都是创建响应式对象(代理)，因此<code>IS_REACTIVE</code>只需判断<code>只读</code>的标识即可</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> createGetter</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">isReadonly</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">shallow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Target</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">receiver</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> ReactiveFlags.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">IS_REACTIVE</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">      return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">isReadonly</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> ReactiveFlags.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">IS_READONLY</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> isReadonly</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> ReactiveFlags.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">IS_SHALLOW</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> shallow</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">      key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> ReactiveFlags.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">RAW</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">      receiver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">===</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">      (isReadonly</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">       ?</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> shallow</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">       ?</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> shallowReadonlyMap</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">       :</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> readonlyMap</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">       :</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> shallow</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">       ?</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> shallowReactiveMap</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">       :</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> reactiveMap</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">      ).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    ) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> target</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><h3 id="isreactive" tabindex="-1">isReactive <a class="header-anchor" href="#isreactive" aria-label="Permalink to &quot;isReactive&quot;">​</a></h3><blockquote><p>检查对象是否是由 <a href="https://v3.cn.vuejs.org/api/basic-reactivity.html#reactive" target="_blank" rel="noreferrer"><code>reactive</code></a> 创建的响应式代理。</p><p>从源码可以看出，如果是<code>readonly</code>创建的<code>value</code>，会进行递归判断，也就是说</p><p>如果该代理是 <a href="https://v3.cn.vuejs.org/api/basic-reactivity.html#readonly" target="_blank" rel="noreferrer"><code>readonly</code></a> 创建的，但包裹了由 <a href="https://v3.cn.vuejs.org/api/basic-reactivity.html#reactive" target="_blank" rel="noreferrer"><code>reactive</code></a> 创建的另一个代理，它也会返回 <code>true</code>。</p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> isReactive</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">isReadonly</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(value)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> isReactive</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">((value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Target</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)[ReactiveFlags.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">RAW</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> !!</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Target</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)[ReactiveFlags.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">IS_REACTIVE</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><h3 id="isreadonly" tabindex="-1">isReadonly <a class="header-anchor" href="#isreadonly" aria-label="Permalink to &quot;isReadonly&quot;">​</a></h3><blockquote><p>检查对象是否是由 <a href="https://v3.cn.vuejs.org/api/basic-reactivity.html#readonly" target="_blank" rel="noreferrer"><code>readonly</code></a> 创建的只读代理。</p><p>他的工作就是检查<code>ReactiveFlags.IS_READONLY</code>标识</p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> isReadonly</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> !!</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Target</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)[ReactiveFlags.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">IS_READONLY</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><h3 id="isshallow" tabindex="-1">isShallow <a class="header-anchor" href="#isshallow" aria-label="Permalink to &quot;isShallow&quot;">​</a></h3><blockquote><p><code>v3.2.28 (2022-01-21)+</code>，但本文记录时，官网文档没有说明该方法，<strong>算是彩蛋了</strong></p><p>检查对象是否为浅层的代理</p><p>他的工作就是检查<code>ReactiveFlags.IS_SHALLOW</code>标识</p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> isShallow</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> !!</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Target</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)[ReactiveFlags.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">IS_SHALLOW</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><h3 id="isproxy" tabindex="-1">isProxy <a class="header-anchor" href="#isproxy" aria-label="Permalink to &quot;isProxy&quot;">​</a></h3><blockquote><p>检查对象是否是由 <a href="https://v3.cn.vuejs.org/api/basic-reactivity.html#reactive" target="_blank" rel="noreferrer"><code>reactive</code></a> 或 <a href="https://v3.cn.vuejs.org/api/basic-reactivity.html#readonly" target="_blank" rel="noreferrer"><code>readonly</code></a> 创建的 proxy。</p><p>所以他的判断交给了<code>isReactive</code>和<code>isReadonly</code></p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> isProxy</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> isReactive</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(value) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">||</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> isReadonly</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><h3 id="toraw" tabindex="-1">toRaw <a class="header-anchor" href="#toraw" aria-label="Permalink to &quot;toRaw&quot;">​</a></h3><blockquote><p>返回 <a href="https://v3.cn.vuejs.org/api/basic-reactivity.html#reactive" target="_blank" rel="noreferrer"><code>reactive</code></a> 或 <a href="https://v3.cn.vuejs.org/api/basic-reactivity.html#readonly" target="_blank" rel="noreferrer"><code>readonly</code></a> 代理的原始对象。</p></blockquote><ul><li><p>先拿到observed的(ReactiveFlags.RAW)值</p></li><li><p>如果raw没有值(undefined)，则证明observed是普通对象，直接返回observed</p></li><li><p>如果raw有值，那么会存在两种情况</p><ul><li>observed的代理只有一层</li><li>observed 是一个嵌套多层的响应式对象，比如：readonly(reactive({}))、readonly(readonly({}))</li></ul></li><li><p>所以需要递归判断</p></li><li><p>重点结束条件：如果raw的值是undefined就是拿到原始对象了</p></li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> toRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">observed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> raw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> observed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (observed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Target</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)[ReactiveFlags.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">RAW</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> raw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> toRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(raw) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> observed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><h3 id="markraw" tabindex="-1">markRaw <a class="header-anchor" href="#markraw" aria-label="Permalink to &quot;markRaw&quot;">​</a></h3><blockquote><p>标记一个对象不会被代理，加入黑名单，不会被<code>observed</code>。目前来看似乎没有提供方法取消标记</p><p>用<code>Object.defineProperty</code> 设置<code>ReactiveFlags.SKIP</code>属性为<code>true</code></p><p>在用<code>reactive</code>创建响应式对象时，会调用<code>getTargetType(target)</code>进行判断，如果<code>target</code>的<code>ReactiveFlags.SKIP</code>属性是<code>true</code>，或者是不可扩展的，则认定这个<code>target</code>是无效的；<strong>因此并不会创建响应式对象</strong></p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> markRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">  def</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(value, ReactiveFlags.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">SKIP</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> getTargetType</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Target</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> value[ReactiveFlags.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">SKIP</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">isExtensible</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(value)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    ?</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> TargetType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">INVALID</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> targetTypeMap</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">toRawType</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(value))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> createReactiveObject</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // only a whitelist of value types can be observed.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> targetType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> getTargetType</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(target)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> (targetType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> TargetType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#BF9EEE;">INVALID</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> target  </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 返回原始对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p><strong>例子</strong></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">gauhar</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">};</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// obj被标记了</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">markRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(obj);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// state不是响应的</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(obj); </span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// state === obj</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> handleClick</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 不会响应</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  state.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">1234</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  state.sex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">man</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p>上面的<code>state === obj</code>，因为创建<code>reactive</code>的时候被拦截<code>return target</code>了。属性有被修改和新增，但已经不是响应式的了。</p>`,49),d=e("code",null,"markRaw",-1),y=i(`<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> any</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">gauhar</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  info</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">    hair</span><span style="--shiki-light:#24292E;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">black</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// obj被标注了，但info没有</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">markRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(obj);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(obj);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">// 这种情况下如果使用obj.info去创建reactive</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(obj.info);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> handleClick</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 不会响应(按照我们上面的说法，这里应该是不会响应的)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  state.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">1234</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  state.sex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">man</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;">  // 但是由于\`同一性风险\`，会得到原始对象(obj)被代理后的版本；这个函数里的改变会被响应</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">  data.hair </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;"> &#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">red</span><span style="--shiki-light:#032F62;--shiki-dark:#DEE492;">&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#7B7F8B;"> // observed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">}</span></span></code></pre></div><p>关于<a href="https://v3.cn.vuejs.org/api/basic-reactivity.html#markraw" target="_blank" rel="noreferrer">同一性风险</a>具体可以参考官网👊</p><h3 id="两个内部方法" tabindex="-1">两个内部方法 <a class="header-anchor" href="#两个内部方法" aria-label="Permalink to &quot;两个内部方法&quot;">​</a></h3><blockquote><p>都是进行对应的转换</p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> toReactive</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">  isObject</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(value) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(value) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> value</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> toReadonly</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFB86C;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;"> =&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;">  isObject</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(value) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#62E884;"> readonly</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">(value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#97E1F1;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">&gt;) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;"> value</span></span></code></pre></div>`,5);function g(o,c,E,C,f,A){const a=n("font");return p(),h("div",null,[F,l(a,{color:"red"},{default:k(()=>[s("但值得注意是")]),_:1}),d,s("只劫持了一层(从源码可以看出)，因此对面里的属性没有被标注。比如"),y])}const u=t(r,[["render",g]]);export{v as __pageData,u as default};
