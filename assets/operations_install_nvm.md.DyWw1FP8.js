import{_ as a,c as s,o as n,a4 as p}from"./chunks/framework.-JfgED0h.js";const v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"operations/install/nvm.md","filePath":"operations/install/nvm.md"}'),e={name:"operations/install/nvm.md"},t=p(`<h3 id="一、下载nvm" tabindex="-1">一、下载nvm <a class="header-anchor" href="#一、下载nvm" aria-label="Permalink to &quot;一、下载nvm&quot;">​</a></h3><p>下载链接：<a href="https://github.com/coreybutler/nvm-windows/releases" title="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noreferrer">github.com/coreybutler…</a></p><p>nvm-noinstall.zip： 绿色免安装版本，使用前需配置</p><p>nvm-setup.zip：下载之后安装，不需要配置，直接就可以用。</p><p>Source code(zip)：zip压缩的源码</p><p>Sourc code(tar.gz)：tar.gz的源码，一般用于*nix系统</p><h3 id="二、安装" tabindex="-1">二、安装 <a class="header-anchor" href="#二、安装" aria-label="Permalink to &quot;二、安装&quot;">​</a></h3><p>按照提示完成安装即可，安装完成后 可在命令行输入nvm,检测是否安装成功，如下图出现nvm版本号及nvm相关操作即为安装成功，反之会提示nvm:command not found</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/14/172122d531908777~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><h3 id="三、修改settings-txt" tabindex="-1">三、修改settings.txt <a class="header-anchor" href="#三、修改settings-txt" aria-label="Permalink to &quot;三、修改settings.txt&quot;">​</a></h3><p>在nvm安装目录中找到settings.txt文件，添加如下代码</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;">node_mirror</span><span style="--shiki-light:#005CC5;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> https</span><span style="--shiki-light:#005CC5;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">//n</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">pm.taobao.org</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">mirrors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">/</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;">npm_mirror</span><span style="--shiki-light:#005CC5;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#F6F6F4;"> https</span><span style="--shiki-light:#005CC5;--shiki-dark:#F286C4;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#E7EE98;">//n</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">pm.taobao.org</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">mirrors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#F6F6F4;">npm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F286C4;">/</span></span></code></pre></div><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/14/172123575ab9a36f~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><h3 id="四、使用" tabindex="-1">四、使用 <a class="header-anchor" href="#四、使用" aria-label="Permalink to &quot;四、使用&quot;">​</a></h3><p>nvm arch [32|64]： 显示node是运行在32位还是64位模式。指定32或64来覆盖默认体系结构。</p><p>nvm install [version] [arch]：该可以是node.js版本或最新稳定版本latest。（可选[arch]）指定安装32位或64位版本（默认为系统arch）。设置[arch]为all以安装32和64位版本。在命令后面添加–insecure，可以绕过远端下载服务器的SSL验证。</p><p>nvm list [available]：列出已经安装的node.js版本。可选的available，显示可下载版本的部分列表。这个命令可以简写为nvm ls [available]。</p><p>nvm on： 启用node.js版本管理。</p><p>nvm off： 禁用node.js版本管理(不卸载任何东西)</p><p>nvm proxy [url]： 设置用于下载的代理。留[url]空白，以查看当前的代理。设置[url]为none删除代理。</p><p>nvm node_mirror [url]：设置node镜像，默认为<a href="https://nodejs.org/dist/.%E3%80%82%E5%8F%AF%E4%BB%A5%E8%AE%BE%E7%BD%AE%E4%B8%BA%E6%B7%98%E5%AE%9D%E7%9A%84%E9%95%9C%E5%83%8Fhttps://npm.taobao.org/mirrors/node/" target="_blank" rel="noreferrer">https://nodejs.org/dist/.。可以设置为淘宝的镜像https://npm.taobao.org/mirrors/node/</a></p><p>nvm npm_mirror [url]：设置npm镜像，默认为<a href="https://github.com/npm/npm/archive/%E3%80%82%E5%8F%AF%E4%BB%A5%E8%AE%BE%E7%BD%AE%E4%B8%BA%E6%B7%98%E5%AE%9D%E7%9A%84%E9%95%9C%E5%83%8Fhttps://npm.taobao.org/mirrors/npm/" target="_blank" rel="noreferrer">https://github.com/npm/npm/archive/。可以设置为淘宝的镜像https://npm.taobao.org/mirrors/npm/</a></p><p>nvm uninstall ： 卸载指定版本的nodejs。</p><p>nvm use [version] [arch]： 切换到使用指定的nodejs版本。可以指定32/64位[arch]。</p><p>nvm use ：将继续使用所选版本，但根据提供的值切换到32/64位模式</p><p>nvm root [path]： 设置 nvm 存储node.js不同版本的目录 ,如果未设置，将使用当前目录。</p><p>nvm version： 显示当前运行的nvm版本，可以简写为nvm v</p><p>具体步骤：</p><ol><li><p>nvm list available 显示可下载版本的部分列表</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/14/172123b3fe96209a~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p></li><li><p>nvm install 版本号 安装指定node版本</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/14/172123f57785ac5f~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p></li><li><p>nvm list 查看已安装的node版本</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/14/172123fa70435eb0~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p></li><li><p>nvm use 版本号 切换node版本</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/14/172124103d6dc627~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>命令行一次输入node -v npm -v 出现版本号即为成功</p></li></ol><p>注：</p><ol><li><p>问题一： 当输入nvm list 查看版本号时, 版本号前带 &quot;*&quot; 即为当前node版本 若版本号前均未出现 * 号 表示node版本切换失败，当前没有选中的node 。</p><p>原因：安装nvm前安装过node,我们无法从最开始的node跳转到nvm文件夹里面的node</p><p>解决办法：找到最开始安装的node文件删除 ，在通过nvm的命令选中指定版本 nvm list 版本号 （版本号需为已经通过nvm安装过的版本）</p></li><li><p>问题二： 使用nvm安装nodeJS之后，node -v命令可以正常使用，但是npm命令一直报“npm不是内部命令”的错误。</p><p>原因：node版本对应的npm可能没有自动安装</p><p>解决办法：npm官网（<a href="https://npm.taobao.org/mirrors/npm/" title="https://npm.taobao.org/mirrors/npm/" target="_blank" rel="noreferrer">npm.taobao.org/mirrors/npm…</a>）下载node对应的npm指定版本，手动进行安装</p><p>1)、进入nvm下指定的node版本目录发现目录下没有npm运行文件</p><p>2)、进入node_modules发现文件夹为空</p></li></ol><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/14/172125db1b3be6c9~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>3)、将下载的npm版本解压后文件重命名并复制到node_modules,并将npm中bin目录下的npm以及npm.cmd复制到与node_modules目录同级目录下</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/14/172125e12de82f06~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image" alt=""></p><p>此时npm命令即可使用，若不能重新执行nvm use 版本号</p><h3 id="五、绿色版安装" tabindex="-1">五、绿色版安装 <a class="header-anchor" href="#五、绿色版安装" aria-label="Permalink to &quot;五、绿色版安装&quot;">​</a></h3><h4 id="_1-下载nvm-noinstall-zip" tabindex="-1">1.下载nvm-noinstall.zip <a class="header-anchor" href="#_1-下载nvm-noinstall-zip" aria-label="Permalink to &quot;1.下载nvm-noinstall.zip&quot;">​</a></h4><p><code>https://github.com/coreybutler/nvm-windows/releases</code></p><h4 id="_2-e盘下创建nvm和nodejs两个文件夹" tabindex="-1">2.E盘下创建nvm和nodejs两个文件夹 <a class="header-anchor" href="#_2-e盘下创建nvm和nodejs两个文件夹" aria-label="Permalink to &quot;2.E盘下创建nvm和nodejs两个文件夹&quot;">​</a></h4><h4 id="_3-将nvm-noinstall-zip解压到刚创建的nvm目录" tabindex="-1">3.将nvm-noinstall.zip解压到刚创建的nvm目录 <a class="header-anchor" href="#_3-将nvm-noinstall-zip解压到刚创建的nvm目录" aria-label="Permalink to &quot;3.将nvm-noinstall.zip解压到刚创建的nvm目录&quot;">​</a></h4><h4 id="_4-以管理员身份运行install-cmd-打开的cmd窗口会生成一个sttings-txt文件-修改文件内容" tabindex="-1">4.以管理员身份运行install.cmd，打开的cmd窗口会生成一个sttings.txt文件,修改文件内容： <a class="header-anchor" href="#_4-以管理员身份运行install-cmd-打开的cmd窗口会生成一个sttings-txt文件-修改文件内容" aria-label="Permalink to &quot;4.以管理员身份运行install.cmd，打开的cmd窗口会生成一个sttings.txt文件,修改文件内容：&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>root: E:\\nvm</span></span>
<span class="line"><span>path: E:\\nodejs</span></span>
<span class="line"><span>arch: 64</span></span>
<span class="line"><span>proxy: none</span></span>
<span class="line"><span>node_mirror: https://npmmirror.com/mirrors/node/</span></span>
<span class="line"><span>npm_mirror: https://npmmirror.com/mirrors/npm/</span></span>
<span class="line"><span>并保存到nvm目录下。</span></span>
<span class="line"><span>或者手动设置国内镜像源：</span></span>
<span class="line"><span>    nvm node_mirror https://npmmirror.com/mirrors/node/</span></span>
<span class="line"><span>    nvm npm_mirror https://npmmirror.com/mirrors/npm/</span></span></code></pre></div><h4 id="_5-添加用户环境变量" tabindex="-1">5.添加用户环境变量： <a class="header-anchor" href="#_5-添加用户环境变量" aria-label="Permalink to &quot;5.添加用户环境变量：&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>​    NVM_HOME     E:\\nvm</span></span>
<span class="line"><span>​    NVM_SYMLINK    E:\\nodejs</span></span>
<span class="line"><span>  修改用户环境变量path，追加%NVM_HOME%、%NVM_SYMLINK%</span></span>
<span class="line"><span>  添加系统环境变量：</span></span>
<span class="line"><span>​    NVM_HOME     E:\\nvm</span></span>
<span class="line"><span>​    NVM_SYMLINK    E:\\nodejs</span></span>
<span class="line"><span>  修改系统环境变量path，追加%NVM_HOME%、%NVM_SYMLINK%</span></span></code></pre></div><h4 id="_6-nvm安装nodejs" tabindex="-1">6.nvm安装nodejs <a class="header-anchor" href="#_6-nvm安装nodejs" aria-label="Permalink to &quot;6.nvm安装nodejs&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>  安装指定版本：nvm install v12.22.12</span></span>
<span class="line"><span>  安装最新版本：nvm install latest</span></span>
<span class="line"><span>  查看已经安装的nodejs版本：nvm ls</span></span>
<span class="line"><span>  使用指定版本：nvm use v12.22.12</span></span>
<span class="line"><span>  查看nodejs版本：node -v</span></span></code></pre></div><h4 id="_7-配置npm全局模块路径和cache默认位置-打开cmd-分开执行如下命令" tabindex="-1">7.配置npm全局模块路径和cache默认位置,打开cmd,分开执行如下命令 <a class="header-anchor" href="#_7-配置npm全局模块路径和cache默认位置-打开cmd-分开执行如下命令" aria-label="Permalink to &quot;7.配置npm全局模块路径和cache默认位置,打开cmd,分开执行如下命令&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>​    npm config set cache &quot;E:\\nvm\\node_cache&quot;</span></span>
<span class="line"><span>​    npm config set prefix &quot;E:\\nvm\\node_global&quot;</span></span>
<span class="line"><span>  由于修改了npm全局模块的路径,我们需要修改</span></span>
<span class="line"><span>  用户环境变量path,追加E:\\nvm\\node_global</span></span>
<span class="line"><span>  系统环境变量path,追加E:\\nvm\\node_global</span></span></code></pre></div><h4 id="_8-安装全局npm" tabindex="-1">8.安装全局npm <a class="header-anchor" href="#_8-安装全局npm" aria-label="Permalink to &quot;8.安装全局npm&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>　　安装node的时候，npm其实也已经一块儿安装了。由于nvm能够管理多个版本的node，</span></span>
<span class="line"><span>    若是每次添加一个node版本都要安装一堆的包很麻烦,若是有一个npm能够让各个版本的node共用，</span></span>
<span class="line"><span>    就不会这么麻烦了，所以要配置一个全局的npm。</span></span>
<span class="line"><span> (1)配置用npm下载包时使用全局安装的包路径,这里和配置npm全局模块路径相同</span></span>
<span class="line"><span>    npm config set prefix &quot;E:\\nvm\\node_global&quot;</span></span>
<span class="line"><span> (2)安装全局npm,不一样的node都使用这个npm,指定npm版本@6.14.16</span></span>
<span class="line"><span>    npm install -g npm@6.14.16 --registry=https://registry.npm.taobao.org</span></span>
<span class="line"><span>    想更新全局的npm的话首先删除全局路径(就是(1)命令的路径,也可以使用命令行查看:</span></span>
<span class="line"><span>    npm config ls)下的npm文件夹,再执行一次这个命令便可</span></span></code></pre></div><h4 id="_9-安装nrm" tabindex="-1">9.安装nrm <a class="header-anchor" href="#_9-安装nrm" aria-label="Permalink to &quot;9.安装nrm&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>  nrm是一个npm源管理器，允许你快速地在npm源间切换</span></span>
<span class="line"><span>  npm install -g nrm</span></span>
<span class="line"><span>  或</span></span>
<span class="line"><span>  cnpm install -g nrm</span></span>
<span class="line"><span>  查看可选的源</span></span>
<span class="line"><span>  nrm ls</span></span>
<span class="line"><span>  切换源，如切换到taobao源</span></span>
<span class="line"><span>  nrm use taobao</span></span></code></pre></div><h4 id="_10-安装cnpm-注意版本-6-2-0-和node版本不对应可能会安装出错" tabindex="-1">10.安装cnpm，注意版本@6.2.0，和node版本不对应可能会安装出错 <a class="header-anchor" href="#_10-安装cnpm-注意版本-6-2-0-和node版本不对应可能会安装出错" aria-label="Permalink to &quot;10.安装cnpm，注意版本@6.2.0，和node版本不对应可能会安装出错&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>  npm install -g cnpm@6.2.0 --registry=https://registry.npm.taobao.org</span></span>
<span class="line"><span>  验证cnpm -v</span></span></code></pre></div><h4 id="_11-安装vue脚手架" tabindex="-1">11.安装vue脚手架 <a class="header-anchor" href="#_11-安装vue脚手架" aria-label="Permalink to &quot;11.安装vue脚手架&quot;">​</a></h4><p><code>npm install -g @vue/cli</code></p><h4 id="_12-安装webpack-注意版本兼容" tabindex="-1">12.安装webpack，注意版本兼容 <a class="header-anchor" href="#_12-安装webpack-注意版本兼容" aria-label="Permalink to &quot;12.安装webpack，注意版本兼容&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light dracula-soft vp-code"><code><span class="line"><span>  Webpack是一个前端资源的打包工具，vue开发的应用使用webpack打包</span></span>
<span class="line"><span>  依次安装：</span></span>
<span class="line"><span>  npm install -g webpack</span></span>
<span class="line"><span>  npm install -g webpack-cli</span></span>
<span class="line"><span>  npm install -g html-webpack-plugin</span></span>
<span class="line"><span>  npm install -g webpack-dev-server</span></span></code></pre></div><h4 id="_13-其他相关命令" tabindex="-1">13.其他相关命令 <a class="header-anchor" href="#_13-其他相关命令" aria-label="Permalink to &quot;13.其他相关命令&quot;">​</a></h4><p>清理npm缓存：<code>npm cache clean --force</code> 清除特定的包的缓存(将<code>&lt;package-name&gt;</code>替换为你想要清除缓存的包的名称)： <code>npm cache clean --force &lt;package-name&gt;</code></p><p>查看镜像的所有版本(如webpack)：npm view webpack versions 检查是否有依赖冲突(如webpack)：npm ls webpack</p>`,61),i=[t];function l(o,r,m,c,h,d){return n(),s("div",null,i)}const u=a(e,[["render",l]]);export{v as __pageData,u as default};
