import{_ as i,c as s,o as a,a4 as n}from"./chunks/framework.K9vKjHgL.js";const h="/docs/assets/BIONIOAIO-1.B62qnetO.jpg",t="/docs/assets/BIONIOAIO-2.CXGjnRfm.jpg",l="/docs/assets/BIONIOAIO-4.mPRTFYDi.jpg",k="/docs/assets/BIONIOAIO-8.n4hpdqhB.jpg",p="/docs/assets/BIONIOAIO-9.CEYFVxJK.jpg",e="/docs/assets/BIONIOAIO-10.Dng3KYqp.jpg",r="/docs/assets/BIONIOAIO-22.MvswE5xI.jpg",F="/docs/assets/BIONIOAIO-23.DDdvm7AX.jpg",D=JSON.parse('{"title":"一文彻底解释清楚Java 中的NIO、BIO和AIO","description":"BIO采用阻塞式 I/O 模型，线程在执行 I/O 操作时被阻塞，无法处理其他任务，适用于连接数较少且稳定的场景。NIO使用非阻塞 I/O 模型，线程在等待 I/O 时可执行其他任务，通过 Selector 监控多个 Channel 上的事件，提高性能和可伸缩性，适用于高并发场景。AIO采用异步 I/O 模型，线程发起 I/O 请求后立即返回，当 I/O 操作完成时通过回调函数通知线程，进一步提高了并发处理能力，适用于高吞吐量场景。","frontmatter":{"title":"一文彻底解释清楚Java 中的NIO、BIO和AIO","shortTitle":"NIO和BIO、AIO的区别","category":["Java核心"],"tag":["Java NIO"],"description":"BIO采用阻塞式 I/O 模型，线程在执行 I/O 操作时被阻塞，无法处理其他任务，适用于连接数较少且稳定的场景。NIO使用非阻塞 I/O 模型，线程在等待 I/O 时可执行其他任务，通过 Selector 监控多个 Channel 上的事件，提高性能和可伸缩性，适用于高并发场景。AIO采用异步 I/O 模型，线程发起 I/O 请求后立即返回，当 I/O 操作完成时通过回调函数通知线程，进一步提高了并发处理能力，适用于高吞吐量场景。","author":"沉默王二","head":[["meta",{"name":"keywords","content":"java,nio,bio,aio"}]]},"headers":[],"relativePath":"backend/tobetter/nio/BIONIOAIO.md","filePath":"backend/tobetter/nio/BIONIOAIO.md"}'),d={name:"backend/tobetter/nio/BIONIOAIO.md"},y=n("",54),g=[y];function E(o,c,f,C,O,u){return a(),s("div",null,g)}const A=i(d,[["render",E]]);export{D as __pageData,A as default};
